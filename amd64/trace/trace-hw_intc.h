/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_INTC_GENERATED_TRACERS_H
#define TRACE_HW_INTC_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_PIC_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_PIC_SET_IRQ_EVENT;
extern TraceEvent _TRACE_PIC_INTERRUPT_EVENT;
extern TraceEvent _TRACE_PIC_IOPORT_WRITE_EVENT;
extern TraceEvent _TRACE_PIC_IOPORT_READ_EVENT;
extern TraceEvent _TRACE_CPU_SET_APIC_BASE_EVENT;
extern TraceEvent _TRACE_CPU_GET_APIC_BASE_EVENT;
extern TraceEvent _TRACE_APIC_REPORT_IRQ_DELIVERED_EVENT;
extern TraceEvent _TRACE_APIC_RESET_IRQ_DELIVERED_EVENT;
extern TraceEvent _TRACE_APIC_GET_IRQ_DELIVERED_EVENT;
extern TraceEvent _TRACE_APIC_LOCAL_DELIVER_EVENT;
extern TraceEvent _TRACE_APIC_DELIVER_IRQ_EVENT;
extern TraceEvent _TRACE_APIC_MEM_READL_EVENT;
extern TraceEvent _TRACE_APIC_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_IOAPIC_SET_REMOTE_IRR_EVENT;
extern TraceEvent _TRACE_IOAPIC_CLEAR_REMOTE_IRR_EVENT;
extern TraceEvent _TRACE_IOAPIC_EOI_BROADCAST_EVENT;
extern TraceEvent _TRACE_IOAPIC_EOI_DELAYED_REASSERT_EVENT;
extern TraceEvent _TRACE_IOAPIC_MEM_READ_EVENT;
extern TraceEvent _TRACE_IOAPIC_MEM_WRITE_EVENT;
extern TraceEvent _TRACE_IOAPIC_SET_IRQ_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_READL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_READL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_EVENT;
extern TraceEvent _TRACE_SLAVIO_CHECK_INTERRUPTS_EVENT;
extern TraceEvent _TRACE_SLAVIO_SET_IRQ_EVENT;
extern TraceEvent _TRACE_SLAVIO_SET_TIMER_IRQ_CPU_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_CHECK_IRQS_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_ACK_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_READL_UNKNOWN_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_EVENT;
extern TraceEvent _TRACE_XICS_ICP_CHECK_IPI_EVENT;
extern TraceEvent _TRACE_XICS_ICP_ACCEPT_EVENT;
extern TraceEvent _TRACE_XICS_ICP_EOI_EVENT;
extern TraceEvent _TRACE_XICS_ICP_IRQ_EVENT;
extern TraceEvent _TRACE_XICS_ICP_RAISE_EVENT;
extern TraceEvent _TRACE_XICS_ICS_SET_IRQ_MSI_EVENT;
extern TraceEvent _TRACE_XICS_MASKED_PENDING_EVENT;
extern TraceEvent _TRACE_XICS_ICS_SET_IRQ_LSI_EVENT;
extern TraceEvent _TRACE_XICS_ICS_WRITE_XIVE_EVENT;
extern TraceEvent _TRACE_XICS_ICS_REJECT_EVENT;
extern TraceEvent _TRACE_XICS_ICS_EOI_EVENT;
extern TraceEvent _TRACE_FLIC_CREATE_DEVICE_EVENT;
extern TraceEvent _TRACE_FLIC_RESET_FAILED_EVENT;
extern TraceEvent _TRACE_QEMU_S390_AIRQ_SUPPRESSED_EVENT;
extern TraceEvent _TRACE_QEMU_S390_SUPPRESS_AIRQ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_SET_IRQ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_UPDATE_FIQ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_READ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_WRITE_EVENT;
extern TraceEvent _TRACE_GIC_ENABLE_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_DISABLE_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_UPDATE_BESTIRQ_EVENT;
extern TraceEvent _TRACE_GIC_UPDATE_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_ACKNOWLEDGE_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_CPU_WRITE_EVENT;
extern TraceEvent _TRACE_GIC_CPU_READ_EVENT;
extern TraceEvent _TRACE_GIC_HYP_READ_EVENT;
extern TraceEvent _TRACE_GIC_HYP_WRITE_EVENT;
extern TraceEvent _TRACE_GIC_DIST_READ_EVENT;
extern TraceEvent _TRACE_GIC_DIST_WRITE_EVENT;
extern TraceEvent _TRACE_GIC_LR_ENTRY_EVENT;
extern TraceEvent _TRACE_GIC_UPDATE_MAINTENANCE_IRQ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_PMR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_PMR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_BPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_BPR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_AP_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_AP_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN1_EL3_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_EL3_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_EL3_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_UPDATE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_SET_IRQS_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_GENERATE_SGI_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IAR0_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IAR1_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_EOIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_HPPIR0_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_HPPIR1_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_DIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_RPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_AP_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_AP_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_HCR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_HCR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_VMCR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_VMCR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR32_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LRC_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR32_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LRC_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_VTR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_MISR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_EISR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_ELRSR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_AP_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_AP_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_BPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_BPR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_PMR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_PMR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_IGRPEN_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_IGRPEN_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_CTLR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_CTLR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_RPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_HPPIR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_DIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_IAR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_EOIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_VIRT_UPDATE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_VIRT_SET_IRQS_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_READ_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_BADREAD_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_BADWRITE_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_READ_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_BADREAD_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_BADWRITE_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_SEND_SGI_EVENT;
extern TraceEvent _TRACE_NVIC_RECOMPUTE_STATE_EVENT;
extern TraceEvent _TRACE_NVIC_RECOMPUTE_STATE_SECURE_EVENT;
extern TraceEvent _TRACE_NVIC_SET_PRIO_EVENT;
extern TraceEvent _TRACE_NVIC_IRQ_UPDATE_EVENT;
extern TraceEvent _TRACE_NVIC_ESCALATE_PRIO_EVENT;
extern TraceEvent _TRACE_NVIC_ESCALATE_DISABLED_EVENT;
extern TraceEvent _TRACE_NVIC_SET_PENDING_EVENT;
extern TraceEvent _TRACE_NVIC_CLEAR_PENDING_EVENT;
extern TraceEvent _TRACE_NVIC_ACKNOWLEDGE_IRQ_EVENT;
extern TraceEvent _TRACE_NVIC_GET_PENDING_IRQ_INFO_EVENT;
extern TraceEvent _TRACE_NVIC_COMPLETE_IRQ_EVENT;
extern TraceEvent _TRACE_NVIC_SET_IRQ_LEVEL_EVENT;
extern TraceEvent _TRACE_NVIC_SET_NMI_LEVEL_EVENT;
extern TraceEvent _TRACE_NVIC_SYSREG_READ_EVENT;
extern TraceEvent _TRACE_NVIC_SYSREG_WRITE_EVENT;
extern TraceEvent _TRACE_HEATHROW_WRITE_EVENT;
extern TraceEvent _TRACE_HEATHROW_READ_EVENT;
extern TraceEvent _TRACE_HEATHROW_SET_IRQ_EVENT;
extern TraceEvent _TRACE_BCM2835_IC_SET_GPU_IRQ_EVENT;
extern TraceEvent _TRACE_BCM2835_IC_SET_CPU_IRQ_EVENT;
extern TraceEvent _TRACE_SPAPR_XIVE_CLAIM_IRQ_EVENT;
extern TraceEvent _TRACE_SPAPR_XIVE_FREE_IRQ_EVENT;
extern TraceEvent _TRACE_SPAPR_XIVE_SET_IRQ_EVENT;
extern TraceEvent _TRACE_SPAPR_XIVE_GET_SOURCE_INFO_EVENT;
extern TraceEvent _TRACE_SPAPR_XIVE_SET_SOURCE_CONFIG_EVENT;
extern TraceEvent _TRACE_SPAPR_XIVE_GET_SOURCE_CONFIG_EVENT;
extern TraceEvent _TRACE_SPAPR_XIVE_GET_QUEUE_INFO_EVENT;
extern TraceEvent _TRACE_SPAPR_XIVE_SET_QUEUE_CONFIG_EVENT;
extern TraceEvent _TRACE_SPAPR_XIVE_GET_QUEUE_CONFIG_EVENT;
extern TraceEvent _TRACE_SPAPR_XIVE_SET_OS_REPORTING_LINE_EVENT;
extern TraceEvent _TRACE_SPAPR_XIVE_GET_OS_REPORTING_LINE_EVENT;
extern TraceEvent _TRACE_SPAPR_XIVE_ESB_EVENT;
extern TraceEvent _TRACE_SPAPR_XIVE_SYNC_EVENT;
extern TraceEvent _TRACE_SPAPR_XIVE_RESET_EVENT;
extern TraceEvent _TRACE_KVM_XIVE_CPU_CONNECT_EVENT;
extern TraceEvent _TRACE_KVM_XIVE_SOURCE_RESET_EVENT;
extern TraceEvent _TRACE_XIVE_TCTX_ACCEPT_EVENT;
extern TraceEvent _TRACE_XIVE_TCTX_NOTIFY_EVENT;
extern TraceEvent _TRACE_XIVE_TCTX_SET_CPPR_EVENT;
extern TraceEvent _TRACE_XIVE_SOURCE_ESB_READ_EVENT;
extern TraceEvent _TRACE_XIVE_SOURCE_ESB_WRITE_EVENT;
extern TraceEvent _TRACE_XIVE_ROUTER_END_NOTIFY_EVENT;
extern TraceEvent _TRACE_XIVE_ROUTER_END_ESCALATE_EVENT;
extern TraceEvent _TRACE_XIVE_TCTX_TM_WRITE_EVENT;
extern TraceEvent _TRACE_XIVE_TCTX_TM_READ_EVENT;
extern TraceEvent _TRACE_XIVE_PRESENTER_NOTIFY_EVENT;
extern TraceEvent _TRACE_XIVE_END_SOURCE_READ_EVENT;
extern TraceEvent _TRACE_PNV_XIVE_IC_HW_TRIGGER_EVENT;
extern TraceEvent _TRACE_GOLDFISH_IRQ_REQUEST_EVENT;
extern TraceEvent _TRACE_GOLDFISH_PIC_READ_EVENT;
extern TraceEvent _TRACE_GOLDFISH_PIC_WRITE_EVENT;
extern TraceEvent _TRACE_GOLDFISH_PIC_RESET_EVENT;
extern TraceEvent _TRACE_GOLDFISH_PIC_REALIZE_EVENT;
extern TraceEvent _TRACE_GOLDFISH_PIC_INSTANCE_INIT_EVENT;
extern uint16_t _TRACE_PIC_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_PIC_SET_IRQ_DSTATE;
extern uint16_t _TRACE_PIC_INTERRUPT_DSTATE;
extern uint16_t _TRACE_PIC_IOPORT_WRITE_DSTATE;
extern uint16_t _TRACE_PIC_IOPORT_READ_DSTATE;
extern uint16_t _TRACE_CPU_SET_APIC_BASE_DSTATE;
extern uint16_t _TRACE_CPU_GET_APIC_BASE_DSTATE;
extern uint16_t _TRACE_APIC_REPORT_IRQ_DELIVERED_DSTATE;
extern uint16_t _TRACE_APIC_RESET_IRQ_DELIVERED_DSTATE;
extern uint16_t _TRACE_APIC_GET_IRQ_DELIVERED_DSTATE;
extern uint16_t _TRACE_APIC_LOCAL_DELIVER_DSTATE;
extern uint16_t _TRACE_APIC_DELIVER_IRQ_DSTATE;
extern uint16_t _TRACE_APIC_MEM_READL_DSTATE;
extern uint16_t _TRACE_APIC_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_IOAPIC_SET_REMOTE_IRR_DSTATE;
extern uint16_t _TRACE_IOAPIC_CLEAR_REMOTE_IRR_DSTATE;
extern uint16_t _TRACE_IOAPIC_EOI_BROADCAST_DSTATE;
extern uint16_t _TRACE_IOAPIC_EOI_DELAYED_REASSERT_DSTATE;
extern uint16_t _TRACE_IOAPIC_MEM_READ_DSTATE;
extern uint16_t _TRACE_IOAPIC_MEM_WRITE_DSTATE;
extern uint16_t _TRACE_IOAPIC_SET_IRQ_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_READL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_READL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_DSTATE;
extern uint16_t _TRACE_SLAVIO_CHECK_INTERRUPTS_DSTATE;
extern uint16_t _TRACE_SLAVIO_SET_IRQ_DSTATE;
extern uint16_t _TRACE_SLAVIO_SET_TIMER_IRQ_CPU_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_CHECK_IRQS_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_ACK_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_READL_UNKNOWN_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_DSTATE;
extern uint16_t _TRACE_XICS_ICP_CHECK_IPI_DSTATE;
extern uint16_t _TRACE_XICS_ICP_ACCEPT_DSTATE;
extern uint16_t _TRACE_XICS_ICP_EOI_DSTATE;
extern uint16_t _TRACE_XICS_ICP_IRQ_DSTATE;
extern uint16_t _TRACE_XICS_ICP_RAISE_DSTATE;
extern uint16_t _TRACE_XICS_ICS_SET_IRQ_MSI_DSTATE;
extern uint16_t _TRACE_XICS_MASKED_PENDING_DSTATE;
extern uint16_t _TRACE_XICS_ICS_SET_IRQ_LSI_DSTATE;
extern uint16_t _TRACE_XICS_ICS_WRITE_XIVE_DSTATE;
extern uint16_t _TRACE_XICS_ICS_REJECT_DSTATE;
extern uint16_t _TRACE_XICS_ICS_EOI_DSTATE;
extern uint16_t _TRACE_FLIC_CREATE_DEVICE_DSTATE;
extern uint16_t _TRACE_FLIC_RESET_FAILED_DSTATE;
extern uint16_t _TRACE_QEMU_S390_AIRQ_SUPPRESSED_DSTATE;
extern uint16_t _TRACE_QEMU_S390_SUPPRESS_AIRQ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_SET_IRQ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_UPDATE_FIQ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_READ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_WRITE_DSTATE;
extern uint16_t _TRACE_GIC_ENABLE_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_DISABLE_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_UPDATE_BESTIRQ_DSTATE;
extern uint16_t _TRACE_GIC_UPDATE_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_ACKNOWLEDGE_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_CPU_WRITE_DSTATE;
extern uint16_t _TRACE_GIC_CPU_READ_DSTATE;
extern uint16_t _TRACE_GIC_HYP_READ_DSTATE;
extern uint16_t _TRACE_GIC_HYP_WRITE_DSTATE;
extern uint16_t _TRACE_GIC_DIST_READ_DSTATE;
extern uint16_t _TRACE_GIC_DIST_WRITE_DSTATE;
extern uint16_t _TRACE_GIC_LR_ENTRY_DSTATE;
extern uint16_t _TRACE_GIC_UPDATE_MAINTENANCE_IRQ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_PMR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_PMR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_BPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_BPR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_AP_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_AP_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN1_EL3_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_EL3_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_EL3_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_UPDATE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_SET_IRQS_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_GENERATE_SGI_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IAR0_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IAR1_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_EOIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_HPPIR0_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_HPPIR1_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_DIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_RPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_AP_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_AP_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_HCR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_HCR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_VMCR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_VMCR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR32_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LRC_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR32_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LRC_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_VTR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_MISR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_EISR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_ELRSR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_AP_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_AP_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_BPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_BPR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_PMR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_PMR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_IGRPEN_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_IGRPEN_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_CTLR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_CTLR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_RPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_HPPIR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_DIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_IAR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_EOIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_VIRT_UPDATE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_VIRT_SET_IRQS_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_READ_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_BADREAD_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_BADWRITE_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_READ_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_BADREAD_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_BADWRITE_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_SEND_SGI_DSTATE;
extern uint16_t _TRACE_NVIC_RECOMPUTE_STATE_DSTATE;
extern uint16_t _TRACE_NVIC_RECOMPUTE_STATE_SECURE_DSTATE;
extern uint16_t _TRACE_NVIC_SET_PRIO_DSTATE;
extern uint16_t _TRACE_NVIC_IRQ_UPDATE_DSTATE;
extern uint16_t _TRACE_NVIC_ESCALATE_PRIO_DSTATE;
extern uint16_t _TRACE_NVIC_ESCALATE_DISABLED_DSTATE;
extern uint16_t _TRACE_NVIC_SET_PENDING_DSTATE;
extern uint16_t _TRACE_NVIC_CLEAR_PENDING_DSTATE;
extern uint16_t _TRACE_NVIC_ACKNOWLEDGE_IRQ_DSTATE;
extern uint16_t _TRACE_NVIC_GET_PENDING_IRQ_INFO_DSTATE;
extern uint16_t _TRACE_NVIC_COMPLETE_IRQ_DSTATE;
extern uint16_t _TRACE_NVIC_SET_IRQ_LEVEL_DSTATE;
extern uint16_t _TRACE_NVIC_SET_NMI_LEVEL_DSTATE;
extern uint16_t _TRACE_NVIC_SYSREG_READ_DSTATE;
extern uint16_t _TRACE_NVIC_SYSREG_WRITE_DSTATE;
extern uint16_t _TRACE_HEATHROW_WRITE_DSTATE;
extern uint16_t _TRACE_HEATHROW_READ_DSTATE;
extern uint16_t _TRACE_HEATHROW_SET_IRQ_DSTATE;
extern uint16_t _TRACE_BCM2835_IC_SET_GPU_IRQ_DSTATE;
extern uint16_t _TRACE_BCM2835_IC_SET_CPU_IRQ_DSTATE;
extern uint16_t _TRACE_SPAPR_XIVE_CLAIM_IRQ_DSTATE;
extern uint16_t _TRACE_SPAPR_XIVE_FREE_IRQ_DSTATE;
extern uint16_t _TRACE_SPAPR_XIVE_SET_IRQ_DSTATE;
extern uint16_t _TRACE_SPAPR_XIVE_GET_SOURCE_INFO_DSTATE;
extern uint16_t _TRACE_SPAPR_XIVE_SET_SOURCE_CONFIG_DSTATE;
extern uint16_t _TRACE_SPAPR_XIVE_GET_SOURCE_CONFIG_DSTATE;
extern uint16_t _TRACE_SPAPR_XIVE_GET_QUEUE_INFO_DSTATE;
extern uint16_t _TRACE_SPAPR_XIVE_SET_QUEUE_CONFIG_DSTATE;
extern uint16_t _TRACE_SPAPR_XIVE_GET_QUEUE_CONFIG_DSTATE;
extern uint16_t _TRACE_SPAPR_XIVE_SET_OS_REPORTING_LINE_DSTATE;
extern uint16_t _TRACE_SPAPR_XIVE_GET_OS_REPORTING_LINE_DSTATE;
extern uint16_t _TRACE_SPAPR_XIVE_ESB_DSTATE;
extern uint16_t _TRACE_SPAPR_XIVE_SYNC_DSTATE;
extern uint16_t _TRACE_SPAPR_XIVE_RESET_DSTATE;
extern uint16_t _TRACE_KVM_XIVE_CPU_CONNECT_DSTATE;
extern uint16_t _TRACE_KVM_XIVE_SOURCE_RESET_DSTATE;
extern uint16_t _TRACE_XIVE_TCTX_ACCEPT_DSTATE;
extern uint16_t _TRACE_XIVE_TCTX_NOTIFY_DSTATE;
extern uint16_t _TRACE_XIVE_TCTX_SET_CPPR_DSTATE;
extern uint16_t _TRACE_XIVE_SOURCE_ESB_READ_DSTATE;
extern uint16_t _TRACE_XIVE_SOURCE_ESB_WRITE_DSTATE;
extern uint16_t _TRACE_XIVE_ROUTER_END_NOTIFY_DSTATE;
extern uint16_t _TRACE_XIVE_ROUTER_END_ESCALATE_DSTATE;
extern uint16_t _TRACE_XIVE_TCTX_TM_WRITE_DSTATE;
extern uint16_t _TRACE_XIVE_TCTX_TM_READ_DSTATE;
extern uint16_t _TRACE_XIVE_PRESENTER_NOTIFY_DSTATE;
extern uint16_t _TRACE_XIVE_END_SOURCE_READ_DSTATE;
extern uint16_t _TRACE_PNV_XIVE_IC_HW_TRIGGER_DSTATE;
extern uint16_t _TRACE_GOLDFISH_IRQ_REQUEST_DSTATE;
extern uint16_t _TRACE_GOLDFISH_PIC_READ_DSTATE;
extern uint16_t _TRACE_GOLDFISH_PIC_WRITE_DSTATE;
extern uint16_t _TRACE_GOLDFISH_PIC_RESET_DSTATE;
extern uint16_t _TRACE_GOLDFISH_PIC_REALIZE_DSTATE;
extern uint16_t _TRACE_GOLDFISH_PIC_INSTANCE_INIT_DSTATE;
#define TRACE_PIC_UPDATE_IRQ_ENABLED 1
#define TRACE_PIC_SET_IRQ_ENABLED 1
#define TRACE_PIC_INTERRUPT_ENABLED 1
#define TRACE_PIC_IOPORT_WRITE_ENABLED 1
#define TRACE_PIC_IOPORT_READ_ENABLED 1
#define TRACE_CPU_SET_APIC_BASE_ENABLED 1
#define TRACE_CPU_GET_APIC_BASE_ENABLED 1
#define TRACE_APIC_REPORT_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_RESET_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_GET_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_LOCAL_DELIVER_ENABLED 1
#define TRACE_APIC_DELIVER_IRQ_ENABLED 1
#define TRACE_APIC_MEM_READL_ENABLED 1
#define TRACE_APIC_MEM_WRITEL_ENABLED 1
#define TRACE_IOAPIC_SET_REMOTE_IRR_ENABLED 1
#define TRACE_IOAPIC_CLEAR_REMOTE_IRR_ENABLED 1
#define TRACE_IOAPIC_EOI_BROADCAST_ENABLED 1
#define TRACE_IOAPIC_EOI_DELAYED_REASSERT_ENABLED 1
#define TRACE_IOAPIC_MEM_READ_ENABLED 1
#define TRACE_IOAPIC_MEM_WRITE_ENABLED 1
#define TRACE_IOAPIC_SET_IRQ_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_ENABLED 1
#define TRACE_SLAVIO_CHECK_INTERRUPTS_ENABLED 1
#define TRACE_SLAVIO_SET_IRQ_ENABLED 1
#define TRACE_SLAVIO_SET_TIMER_IRQ_CPU_ENABLED 1
#define TRACE_GRLIB_IRQMP_CHECK_IRQS_ENABLED 1
#define TRACE_GRLIB_IRQMP_ACK_ENABLED 1
#define TRACE_GRLIB_IRQMP_SET_IRQ_ENABLED 1
#define TRACE_GRLIB_IRQMP_READL_UNKNOWN_ENABLED 1
#define TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_ENABLED 1
#define TRACE_XICS_ICP_CHECK_IPI_ENABLED 1
#define TRACE_XICS_ICP_ACCEPT_ENABLED 1
#define TRACE_XICS_ICP_EOI_ENABLED 1
#define TRACE_XICS_ICP_IRQ_ENABLED 1
#define TRACE_XICS_ICP_RAISE_ENABLED 1
#define TRACE_XICS_ICS_SET_IRQ_MSI_ENABLED 1
#define TRACE_XICS_MASKED_PENDING_ENABLED 1
#define TRACE_XICS_ICS_SET_IRQ_LSI_ENABLED 1
#define TRACE_XICS_ICS_WRITE_XIVE_ENABLED 1
#define TRACE_XICS_ICS_REJECT_ENABLED 1
#define TRACE_XICS_ICS_EOI_ENABLED 1
#define TRACE_FLIC_CREATE_DEVICE_ENABLED 1
#define TRACE_FLIC_RESET_FAILED_ENABLED 1
#define TRACE_QEMU_S390_AIRQ_SUPPRESSED_ENABLED 1
#define TRACE_QEMU_S390_SUPPRESS_AIRQ_ENABLED 1
#define TRACE_ASPEED_VIC_SET_IRQ_ENABLED 1
#define TRACE_ASPEED_VIC_UPDATE_FIQ_ENABLED 1
#define TRACE_ASPEED_VIC_UPDATE_IRQ_ENABLED 1
#define TRACE_ASPEED_VIC_READ_ENABLED 1
#define TRACE_ASPEED_VIC_WRITE_ENABLED 1
#define TRACE_GIC_ENABLE_IRQ_ENABLED 1
#define TRACE_GIC_DISABLE_IRQ_ENABLED 1
#define TRACE_GIC_SET_IRQ_ENABLED 1
#define TRACE_GIC_UPDATE_BESTIRQ_ENABLED 1
#define TRACE_GIC_UPDATE_SET_IRQ_ENABLED 1
#define TRACE_GIC_ACKNOWLEDGE_IRQ_ENABLED 1
#define TRACE_GIC_CPU_WRITE_ENABLED 1
#define TRACE_GIC_CPU_READ_ENABLED 1
#define TRACE_GIC_HYP_READ_ENABLED 1
#define TRACE_GIC_HYP_WRITE_ENABLED 1
#define TRACE_GIC_DIST_READ_ENABLED 1
#define TRACE_GIC_DIST_WRITE_ENABLED 1
#define TRACE_GIC_LR_ENTRY_ENABLED 1
#define TRACE_GIC_UPDATE_MAINTENANCE_IRQ_ENABLED 1
#define TRACE_GICV3_ICC_PMR_READ_ENABLED 1
#define TRACE_GICV3_ICC_PMR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_BPR_READ_ENABLED 1
#define TRACE_GICV3_ICC_BPR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_AP_READ_ENABLED 1
#define TRACE_GICV3_ICC_AP_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN_READ_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN1_EL3_READ_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_READ_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_EL3_READ_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_EL3_WRITE_ENABLED 1
#define TRACE_GICV3_CPUIF_UPDATE_ENABLED 1
#define TRACE_GICV3_CPUIF_SET_IRQS_ENABLED 1
#define TRACE_GICV3_ICC_GENERATE_SGI_ENABLED 1
#define TRACE_GICV3_ICC_IAR0_READ_ENABLED 1
#define TRACE_GICV3_ICC_IAR1_READ_ENABLED 1
#define TRACE_GICV3_ICC_EOIR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_HPPIR0_READ_ENABLED 1
#define TRACE_GICV3_ICC_HPPIR1_READ_ENABLED 1
#define TRACE_GICV3_ICC_DIR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_RPR_READ_ENABLED 1
#define TRACE_GICV3_ICH_AP_READ_ENABLED 1
#define TRACE_GICV3_ICH_AP_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_HCR_READ_ENABLED 1
#define TRACE_GICV3_ICH_HCR_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_VMCR_READ_ENABLED 1
#define TRACE_GICV3_ICH_VMCR_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_LR_READ_ENABLED 1
#define TRACE_GICV3_ICH_LR32_READ_ENABLED 1
#define TRACE_GICV3_ICH_LRC_READ_ENABLED 1
#define TRACE_GICV3_ICH_LR_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_LR32_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_LRC_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_VTR_READ_ENABLED 1
#define TRACE_GICV3_ICH_MISR_READ_ENABLED 1
#define TRACE_GICV3_ICH_EISR_READ_ENABLED 1
#define TRACE_GICV3_ICH_ELRSR_READ_ENABLED 1
#define TRACE_GICV3_ICV_AP_READ_ENABLED 1
#define TRACE_GICV3_ICV_AP_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_BPR_READ_ENABLED 1
#define TRACE_GICV3_ICV_BPR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_PMR_READ_ENABLED 1
#define TRACE_GICV3_ICV_PMR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_IGRPEN_READ_ENABLED 1
#define TRACE_GICV3_ICV_IGRPEN_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_CTLR_READ_ENABLED 1
#define TRACE_GICV3_ICV_CTLR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_RPR_READ_ENABLED 1
#define TRACE_GICV3_ICV_HPPIR_READ_ENABLED 1
#define TRACE_GICV3_ICV_DIR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_IAR_READ_ENABLED 1
#define TRACE_GICV3_ICV_EOIR_WRITE_ENABLED 1
#define TRACE_GICV3_CPUIF_VIRT_UPDATE_ENABLED 1
#define TRACE_GICV3_CPUIF_VIRT_SET_IRQS_ENABLED 1
#define TRACE_GICV3_DIST_READ_ENABLED 1
#define TRACE_GICV3_DIST_BADREAD_ENABLED 1
#define TRACE_GICV3_DIST_WRITE_ENABLED 1
#define TRACE_GICV3_DIST_BADWRITE_ENABLED 1
#define TRACE_GICV3_DIST_SET_IRQ_ENABLED 1
#define TRACE_GICV3_REDIST_READ_ENABLED 1
#define TRACE_GICV3_REDIST_BADREAD_ENABLED 1
#define TRACE_GICV3_REDIST_WRITE_ENABLED 1
#define TRACE_GICV3_REDIST_BADWRITE_ENABLED 1
#define TRACE_GICV3_REDIST_SET_IRQ_ENABLED 1
#define TRACE_GICV3_REDIST_SEND_SGI_ENABLED 1
#define TRACE_NVIC_RECOMPUTE_STATE_ENABLED 1
#define TRACE_NVIC_RECOMPUTE_STATE_SECURE_ENABLED 1
#define TRACE_NVIC_SET_PRIO_ENABLED 1
#define TRACE_NVIC_IRQ_UPDATE_ENABLED 1
#define TRACE_NVIC_ESCALATE_PRIO_ENABLED 1
#define TRACE_NVIC_ESCALATE_DISABLED_ENABLED 1
#define TRACE_NVIC_SET_PENDING_ENABLED 1
#define TRACE_NVIC_CLEAR_PENDING_ENABLED 1
#define TRACE_NVIC_ACKNOWLEDGE_IRQ_ENABLED 1
#define TRACE_NVIC_GET_PENDING_IRQ_INFO_ENABLED 1
#define TRACE_NVIC_COMPLETE_IRQ_ENABLED 1
#define TRACE_NVIC_SET_IRQ_LEVEL_ENABLED 1
#define TRACE_NVIC_SET_NMI_LEVEL_ENABLED 1
#define TRACE_NVIC_SYSREG_READ_ENABLED 1
#define TRACE_NVIC_SYSREG_WRITE_ENABLED 1
#define TRACE_HEATHROW_WRITE_ENABLED 1
#define TRACE_HEATHROW_READ_ENABLED 1
#define TRACE_HEATHROW_SET_IRQ_ENABLED 1
#define TRACE_BCM2835_IC_SET_GPU_IRQ_ENABLED 1
#define TRACE_BCM2835_IC_SET_CPU_IRQ_ENABLED 1
#define TRACE_SPAPR_XIVE_CLAIM_IRQ_ENABLED 1
#define TRACE_SPAPR_XIVE_FREE_IRQ_ENABLED 1
#define TRACE_SPAPR_XIVE_SET_IRQ_ENABLED 1
#define TRACE_SPAPR_XIVE_GET_SOURCE_INFO_ENABLED 1
#define TRACE_SPAPR_XIVE_SET_SOURCE_CONFIG_ENABLED 1
#define TRACE_SPAPR_XIVE_GET_SOURCE_CONFIG_ENABLED 1
#define TRACE_SPAPR_XIVE_GET_QUEUE_INFO_ENABLED 1
#define TRACE_SPAPR_XIVE_SET_QUEUE_CONFIG_ENABLED 1
#define TRACE_SPAPR_XIVE_GET_QUEUE_CONFIG_ENABLED 1
#define TRACE_SPAPR_XIVE_SET_OS_REPORTING_LINE_ENABLED 1
#define TRACE_SPAPR_XIVE_GET_OS_REPORTING_LINE_ENABLED 1
#define TRACE_SPAPR_XIVE_ESB_ENABLED 1
#define TRACE_SPAPR_XIVE_SYNC_ENABLED 1
#define TRACE_SPAPR_XIVE_RESET_ENABLED 1
#define TRACE_KVM_XIVE_CPU_CONNECT_ENABLED 1
#define TRACE_KVM_XIVE_SOURCE_RESET_ENABLED 1
#define TRACE_XIVE_TCTX_ACCEPT_ENABLED 1
#define TRACE_XIVE_TCTX_NOTIFY_ENABLED 1
#define TRACE_XIVE_TCTX_SET_CPPR_ENABLED 1
#define TRACE_XIVE_SOURCE_ESB_READ_ENABLED 1
#define TRACE_XIVE_SOURCE_ESB_WRITE_ENABLED 1
#define TRACE_XIVE_ROUTER_END_NOTIFY_ENABLED 1
#define TRACE_XIVE_ROUTER_END_ESCALATE_ENABLED 1
#define TRACE_XIVE_TCTX_TM_WRITE_ENABLED 1
#define TRACE_XIVE_TCTX_TM_READ_ENABLED 1
#define TRACE_XIVE_PRESENTER_NOTIFY_ENABLED 1
#define TRACE_XIVE_END_SOURCE_READ_ENABLED 1
#define TRACE_PNV_XIVE_IC_HW_TRIGGER_ENABLED 1
#define TRACE_GOLDFISH_IRQ_REQUEST_ENABLED 1
#define TRACE_GOLDFISH_PIC_READ_ENABLED 1
#define TRACE_GOLDFISH_PIC_WRITE_ENABLED 1
#define TRACE_GOLDFISH_PIC_RESET_ENABLED 1
#define TRACE_GOLDFISH_PIC_REALIZE_ENABLED 1
#define TRACE_GOLDFISH_PIC_INSTANCE_INIT_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_PIC_UPDATE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PIC_UPDATE_IRQ) || \
    false)

static inline void _nocheck__trace_pic_update_irq(bool master, uint8_t imr, uint8_t irr, uint8_t padd)
{
    if (trace_event_get_state(TRACE_PIC_UPDATE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:pic_update_irq " "master %d imr %"PRIu8" irr %"PRIu8" padd %"PRIu8 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , master, imr, irr, padd);
#line 610 "trace/trace-hw_intc.h"
        } else {
#line 4 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("pic_update_irq " "master %d imr %"PRIu8" irr %"PRIu8" padd %"PRIu8 "\n", master, imr, irr, padd);
#line 614 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_pic_update_irq(bool master, uint8_t imr, uint8_t irr, uint8_t padd)
{
    if (true) {
        _nocheck__trace_pic_update_irq(master, imr, irr, padd);
    }
}

#define TRACE_PIC_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PIC_SET_IRQ) || \
    false)

static inline void _nocheck__trace_pic_set_irq(bool master, int irq, int level)
{
    if (trace_event_get_state(TRACE_PIC_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:pic_set_irq " "master %d irq %d level %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , master, irq, level);
#line 641 "trace/trace-hw_intc.h"
        } else {
#line 5 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("pic_set_irq " "master %d irq %d level %d" "\n", master, irq, level);
#line 645 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_pic_set_irq(bool master, int irq, int level)
{
    if (true) {
        _nocheck__trace_pic_set_irq(master, irq, level);
    }
}

#define TRACE_PIC_INTERRUPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PIC_INTERRUPT) || \
    false)

static inline void _nocheck__trace_pic_interrupt(int irq, int intno)
{
    if (trace_event_get_state(TRACE_PIC_INTERRUPT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:pic_interrupt " "irq %d intno %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, intno);
#line 672 "trace/trace-hw_intc.h"
        } else {
#line 6 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("pic_interrupt " "irq %d intno %d" "\n", irq, intno);
#line 676 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_pic_interrupt(int irq, int intno)
{
    if (true) {
        _nocheck__trace_pic_interrupt(irq, intno);
    }
}

#define TRACE_PIC_IOPORT_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PIC_IOPORT_WRITE) || \
    false)

static inline void _nocheck__trace_pic_ioport_write(bool master, uint64_t addr, uint64_t val)
{
    if (trace_event_get_state(TRACE_PIC_IOPORT_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:pic_ioport_write " "master %d addr 0x%"PRIx64" val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , master, addr, val);
#line 703 "trace/trace-hw_intc.h"
        } else {
#line 7 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("pic_ioport_write " "master %d addr 0x%"PRIx64" val 0x%"PRIx64 "\n", master, addr, val);
#line 707 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_pic_ioport_write(bool master, uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_pic_ioport_write(master, addr, val);
    }
}

#define TRACE_PIC_IOPORT_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PIC_IOPORT_READ) || \
    false)

static inline void _nocheck__trace_pic_ioport_read(bool master, uint64_t addr, int val)
{
    if (trace_event_get_state(TRACE_PIC_IOPORT_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:pic_ioport_read " "master %d addr 0x%"PRIx64" val 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , master, addr, val);
#line 734 "trace/trace-hw_intc.h"
        } else {
#line 8 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("pic_ioport_read " "master %d addr 0x%"PRIx64" val 0x%x" "\n", master, addr, val);
#line 738 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_pic_ioport_read(bool master, uint64_t addr, int val)
{
    if (true) {
        _nocheck__trace_pic_ioport_read(master, addr, val);
    }
}

#define TRACE_CPU_SET_APIC_BASE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CPU_SET_APIC_BASE) || \
    false)

static inline void _nocheck__trace_cpu_set_apic_base(uint64_t val)
{
    if (trace_event_get_state(TRACE_CPU_SET_APIC_BASE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:cpu_set_apic_base " "0x%016"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 765 "trace/trace-hw_intc.h"
        } else {
#line 11 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("cpu_set_apic_base " "0x%016"PRIx64 "\n", val);
#line 769 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_cpu_set_apic_base(uint64_t val)
{
    if (true) {
        _nocheck__trace_cpu_set_apic_base(val);
    }
}

#define TRACE_CPU_GET_APIC_BASE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CPU_GET_APIC_BASE) || \
    false)

static inline void _nocheck__trace_cpu_get_apic_base(uint64_t val)
{
    if (trace_event_get_state(TRACE_CPU_GET_APIC_BASE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:cpu_get_apic_base " "0x%016"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 796 "trace/trace-hw_intc.h"
        } else {
#line 12 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("cpu_get_apic_base " "0x%016"PRIx64 "\n", val);
#line 800 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_cpu_get_apic_base(uint64_t val)
{
    if (true) {
        _nocheck__trace_cpu_get_apic_base(val);
    }
}

#define TRACE_APIC_REPORT_IRQ_DELIVERED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APIC_REPORT_IRQ_DELIVERED) || \
    false)

static inline void _nocheck__trace_apic_report_irq_delivered(int apic_irq_delivered)
{
    if (trace_event_get_state(TRACE_APIC_REPORT_IRQ_DELIVERED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:apic_report_irq_delivered " "coalescing %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , apic_irq_delivered);
#line 827 "trace/trace-hw_intc.h"
        } else {
#line 14 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("apic_report_irq_delivered " "coalescing %d" "\n", apic_irq_delivered);
#line 831 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_apic_report_irq_delivered(int apic_irq_delivered)
{
    if (true) {
        _nocheck__trace_apic_report_irq_delivered(apic_irq_delivered);
    }
}

#define TRACE_APIC_RESET_IRQ_DELIVERED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APIC_RESET_IRQ_DELIVERED) || \
    false)

static inline void _nocheck__trace_apic_reset_irq_delivered(int apic_irq_delivered)
{
    if (trace_event_get_state(TRACE_APIC_RESET_IRQ_DELIVERED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:apic_reset_irq_delivered " "old coalescing %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , apic_irq_delivered);
#line 858 "trace/trace-hw_intc.h"
        } else {
#line 15 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("apic_reset_irq_delivered " "old coalescing %d" "\n", apic_irq_delivered);
#line 862 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_apic_reset_irq_delivered(int apic_irq_delivered)
{
    if (true) {
        _nocheck__trace_apic_reset_irq_delivered(apic_irq_delivered);
    }
}

#define TRACE_APIC_GET_IRQ_DELIVERED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APIC_GET_IRQ_DELIVERED) || \
    false)

static inline void _nocheck__trace_apic_get_irq_delivered(int apic_irq_delivered)
{
    if (trace_event_get_state(TRACE_APIC_GET_IRQ_DELIVERED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:apic_get_irq_delivered " "returning coalescing %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , apic_irq_delivered);
#line 889 "trace/trace-hw_intc.h"
        } else {
#line 16 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("apic_get_irq_delivered " "returning coalescing %d" "\n", apic_irq_delivered);
#line 893 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_apic_get_irq_delivered(int apic_irq_delivered)
{
    if (true) {
        _nocheck__trace_apic_get_irq_delivered(apic_irq_delivered);
    }
}

#define TRACE_APIC_LOCAL_DELIVER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APIC_LOCAL_DELIVER) || \
    false)

static inline void _nocheck__trace_apic_local_deliver(int vector, uint32_t lvt)
{
    if (trace_event_get_state(TRACE_APIC_LOCAL_DELIVER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:apic_local_deliver " "vector %d delivery mode %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , vector, lvt);
#line 920 "trace/trace-hw_intc.h"
        } else {
#line 19 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("apic_local_deliver " "vector %d delivery mode %d" "\n", vector, lvt);
#line 924 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_apic_local_deliver(int vector, uint32_t lvt)
{
    if (true) {
        _nocheck__trace_apic_local_deliver(vector, lvt);
    }
}

#define TRACE_APIC_DELIVER_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APIC_DELIVER_IRQ) || \
    false)

static inline void _nocheck__trace_apic_deliver_irq(uint8_t dest, uint8_t dest_mode, uint8_t delivery_mode, uint8_t vector_num, uint8_t trigger_mode)
{
    if (trace_event_get_state(TRACE_APIC_DELIVER_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:apic_deliver_irq " "dest %d dest_mode %d delivery_mode %d vector %d trigger_mode %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dest, dest_mode, delivery_mode, vector_num, trigger_mode);
#line 951 "trace/trace-hw_intc.h"
        } else {
#line 20 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("apic_deliver_irq " "dest %d dest_mode %d delivery_mode %d vector %d trigger_mode %d" "\n", dest, dest_mode, delivery_mode, vector_num, trigger_mode);
#line 955 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_apic_deliver_irq(uint8_t dest, uint8_t dest_mode, uint8_t delivery_mode, uint8_t vector_num, uint8_t trigger_mode)
{
    if (true) {
        _nocheck__trace_apic_deliver_irq(dest, dest_mode, delivery_mode, vector_num, trigger_mode);
    }
}

#define TRACE_APIC_MEM_READL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APIC_MEM_READL) || \
    false)

static inline void _nocheck__trace_apic_mem_readl(uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_APIC_MEM_READL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:apic_mem_readl " "0x%"PRIx64" = 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 982 "trace/trace-hw_intc.h"
        } else {
#line 21 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("apic_mem_readl " "0x%"PRIx64" = 0x%08x" "\n", addr, val);
#line 986 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_apic_mem_readl(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_apic_mem_readl(addr, val);
    }
}

#define TRACE_APIC_MEM_WRITEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APIC_MEM_WRITEL) || \
    false)

static inline void _nocheck__trace_apic_mem_writel(uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_APIC_MEM_WRITEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:apic_mem_writel " "0x%"PRIx64" = 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 1013 "trace/trace-hw_intc.h"
        } else {
#line 22 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("apic_mem_writel " "0x%"PRIx64" = 0x%08x" "\n", addr, val);
#line 1017 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_apic_mem_writel(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_apic_mem_writel(addr, val);
    }
}

#define TRACE_IOAPIC_SET_REMOTE_IRR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOAPIC_SET_REMOTE_IRR) || \
    false)

static inline void _nocheck__trace_ioapic_set_remote_irr(int n)
{
    if (trace_event_get_state(TRACE_IOAPIC_SET_REMOTE_IRR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 25 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:ioapic_set_remote_irr " "set remote irr for pin %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , n);
#line 1044 "trace/trace-hw_intc.h"
        } else {
#line 25 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("ioapic_set_remote_irr " "set remote irr for pin %d" "\n", n);
#line 1048 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_ioapic_set_remote_irr(int n)
{
    if (true) {
        _nocheck__trace_ioapic_set_remote_irr(n);
    }
}

#define TRACE_IOAPIC_CLEAR_REMOTE_IRR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOAPIC_CLEAR_REMOTE_IRR) || \
    false)

static inline void _nocheck__trace_ioapic_clear_remote_irr(int n, int vector)
{
    if (trace_event_get_state(TRACE_IOAPIC_CLEAR_REMOTE_IRR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:ioapic_clear_remote_irr " "clear remote irr for pin %d vector %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , n, vector);
#line 1075 "trace/trace-hw_intc.h"
        } else {
#line 26 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("ioapic_clear_remote_irr " "clear remote irr for pin %d vector %d" "\n", n, vector);
#line 1079 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_ioapic_clear_remote_irr(int n, int vector)
{
    if (true) {
        _nocheck__trace_ioapic_clear_remote_irr(n, vector);
    }
}

#define TRACE_IOAPIC_EOI_BROADCAST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOAPIC_EOI_BROADCAST) || \
    false)

static inline void _nocheck__trace_ioapic_eoi_broadcast(int vector)
{
    if (trace_event_get_state(TRACE_IOAPIC_EOI_BROADCAST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:ioapic_eoi_broadcast " "EOI broadcast for vector %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , vector);
#line 1106 "trace/trace-hw_intc.h"
        } else {
#line 27 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("ioapic_eoi_broadcast " "EOI broadcast for vector %d" "\n", vector);
#line 1110 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_ioapic_eoi_broadcast(int vector)
{
    if (true) {
        _nocheck__trace_ioapic_eoi_broadcast(vector);
    }
}

#define TRACE_IOAPIC_EOI_DELAYED_REASSERT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOAPIC_EOI_DELAYED_REASSERT) || \
    false)

static inline void _nocheck__trace_ioapic_eoi_delayed_reassert(int vector)
{
    if (trace_event_get_state(TRACE_IOAPIC_EOI_DELAYED_REASSERT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:ioapic_eoi_delayed_reassert " "delayed reassert on EOI broadcast for vector %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , vector);
#line 1137 "trace/trace-hw_intc.h"
        } else {
#line 28 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("ioapic_eoi_delayed_reassert " "delayed reassert on EOI broadcast for vector %d" "\n", vector);
#line 1141 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_ioapic_eoi_delayed_reassert(int vector)
{
    if (true) {
        _nocheck__trace_ioapic_eoi_delayed_reassert(vector);
    }
}

#define TRACE_IOAPIC_MEM_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOAPIC_MEM_READ) || \
    false)

static inline void _nocheck__trace_ioapic_mem_read(uint8_t addr, uint8_t regsel, uint8_t size, uint32_t val)
{
    if (trace_event_get_state(TRACE_IOAPIC_MEM_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:ioapic_mem_read " "ioapic mem read addr 0x%"PRIx8" regsel: 0x%"PRIx8" size 0x%"PRIx8" retval 0x%"PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, regsel, size, val);
#line 1168 "trace/trace-hw_intc.h"
        } else {
#line 29 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("ioapic_mem_read " "ioapic mem read addr 0x%"PRIx8" regsel: 0x%"PRIx8" size 0x%"PRIx8" retval 0x%"PRIx32 "\n", addr, regsel, size, val);
#line 1172 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_ioapic_mem_read(uint8_t addr, uint8_t regsel, uint8_t size, uint32_t val)
{
    if (true) {
        _nocheck__trace_ioapic_mem_read(addr, regsel, size, val);
    }
}

#define TRACE_IOAPIC_MEM_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOAPIC_MEM_WRITE) || \
    false)

static inline void _nocheck__trace_ioapic_mem_write(uint8_t addr, uint8_t regsel, uint8_t size, uint32_t val)
{
    if (trace_event_get_state(TRACE_IOAPIC_MEM_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:ioapic_mem_write " "ioapic mem write addr 0x%"PRIx8" regsel: 0x%"PRIx8" size 0x%"PRIx8" val 0x%"PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, regsel, size, val);
#line 1199 "trace/trace-hw_intc.h"
        } else {
#line 30 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("ioapic_mem_write " "ioapic mem write addr 0x%"PRIx8" regsel: 0x%"PRIx8" size 0x%"PRIx8" val 0x%"PRIx32 "\n", addr, regsel, size, val);
#line 1203 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_ioapic_mem_write(uint8_t addr, uint8_t regsel, uint8_t size, uint32_t val)
{
    if (true) {
        _nocheck__trace_ioapic_mem_write(addr, regsel, size, val);
    }
}

#define TRACE_IOAPIC_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOAPIC_SET_IRQ) || \
    false)

static inline void _nocheck__trace_ioapic_set_irq(int vector, int level)
{
    if (trace_event_get_state(TRACE_IOAPIC_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 31 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:ioapic_set_irq " "vector: %d level: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , vector, level);
#line 1230 "trace/trace-hw_intc.h"
        } else {
#line 31 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("ioapic_set_irq " "vector: %d level: %d" "\n", vector, level);
#line 1234 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_ioapic_set_irq(int vector, int level)
{
    if (true) {
        _nocheck__trace_ioapic_set_irq(vector, level);
    }
}

#define TRACE_SLAVIO_INTCTL_MEM_READL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTL_MEM_READL) || \
    false)

static inline void _nocheck__trace_slavio_intctl_mem_readl(uint32_t cpu, uint64_t addr, uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTL_MEM_READL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 34 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_intctl_mem_readl " "read cpu %d reg 0x%"PRIx64" = 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, addr, ret);
#line 1261 "trace/trace-hw_intc.h"
        } else {
#line 34 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("slavio_intctl_mem_readl " "read cpu %d reg 0x%"PRIx64" = 0x%x" "\n", cpu, addr, ret);
#line 1265 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_slavio_intctl_mem_readl(uint32_t cpu, uint64_t addr, uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_intctl_mem_readl(cpu, addr, ret);
    }
}

#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTL_MEM_WRITEL) || \
    false)

static inline void _nocheck__trace_slavio_intctl_mem_writel(uint32_t cpu, uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTL_MEM_WRITEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 35 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_intctl_mem_writel " "write cpu %d reg 0x%"PRIx64" = 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, addr, val);
#line 1292 "trace/trace-hw_intc.h"
        } else {
#line 35 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("slavio_intctl_mem_writel " "write cpu %d reg 0x%"PRIx64" = 0x%x" "\n", cpu, addr, val);
#line 1296 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_slavio_intctl_mem_writel(uint32_t cpu, uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_intctl_mem_writel(cpu, addr, val);
    }
}

#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR) || \
    false)

static inline void _nocheck__trace_slavio_intctl_mem_writel_clear(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 36 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_intctl_mem_writel_clear " "Cleared cpu %d irq mask 0x%x, curmask 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val, intreg_pending);
#line 1323 "trace/trace-hw_intc.h"
        } else {
#line 36 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("slavio_intctl_mem_writel_clear " "Cleared cpu %d irq mask 0x%x, curmask 0x%x" "\n", cpu, val, intreg_pending);
#line 1327 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_slavio_intctl_mem_writel_clear(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
    if (true) {
        _nocheck__trace_slavio_intctl_mem_writel_clear(cpu, val, intreg_pending);
    }
}

#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET) || \
    false)

static inline void _nocheck__trace_slavio_intctl_mem_writel_set(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 37 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_intctl_mem_writel_set " "Set cpu %d irq mask 0x%x, curmask 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val, intreg_pending);
#line 1354 "trace/trace-hw_intc.h"
        } else {
#line 37 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("slavio_intctl_mem_writel_set " "Set cpu %d irq mask 0x%x, curmask 0x%x" "\n", cpu, val, intreg_pending);
#line 1358 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_slavio_intctl_mem_writel_set(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
    if (true) {
        _nocheck__trace_slavio_intctl_mem_writel_set(cpu, val, intreg_pending);
    }
}

#define TRACE_SLAVIO_INTCTLM_MEM_READL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTLM_MEM_READL) || \
    false)

static inline void _nocheck__trace_slavio_intctlm_mem_readl(uint64_t addr, uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTLM_MEM_READL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 38 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_intctlm_mem_readl " "read system reg 0x%"PRIx64" = 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, ret);
#line 1385 "trace/trace-hw_intc.h"
        } else {
#line 38 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("slavio_intctlm_mem_readl " "read system reg 0x%"PRIx64" = 0x%x" "\n", addr, ret);
#line 1389 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_slavio_intctlm_mem_readl(uint64_t addr, uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_intctlm_mem_readl(addr, ret);
    }
}

#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTLM_MEM_WRITEL) || \
    false)

static inline void _nocheck__trace_slavio_intctlm_mem_writel(uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTLM_MEM_WRITEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 39 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_intctlm_mem_writel " "write system reg 0x%"PRIx64" = 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 1416 "trace/trace-hw_intc.h"
        } else {
#line 39 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("slavio_intctlm_mem_writel " "write system reg 0x%"PRIx64" = 0x%x" "\n", addr, val);
#line 1420 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_slavio_intctlm_mem_writel(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_intctlm_mem_writel(addr, val);
    }
}

#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE) || \
    false)

static inline void _nocheck__trace_slavio_intctlm_mem_writel_enable(uint32_t val, uint32_t intregm_disabled)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 40 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_intctlm_mem_writel_enable " "Enabled master irq mask 0x%x, curmask 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val, intregm_disabled);
#line 1447 "trace/trace-hw_intc.h"
        } else {
#line 40 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("slavio_intctlm_mem_writel_enable " "Enabled master irq mask 0x%x, curmask 0x%x" "\n", val, intregm_disabled);
#line 1451 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_slavio_intctlm_mem_writel_enable(uint32_t val, uint32_t intregm_disabled)
{
    if (true) {
        _nocheck__trace_slavio_intctlm_mem_writel_enable(val, intregm_disabled);
    }
}

#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE) || \
    false)

static inline void _nocheck__trace_slavio_intctlm_mem_writel_disable(uint32_t val, uint32_t intregm_disabled)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 41 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_intctlm_mem_writel_disable " "Disabled master irq mask 0x%x, curmask 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val, intregm_disabled);
#line 1478 "trace/trace-hw_intc.h"
        } else {
#line 41 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("slavio_intctlm_mem_writel_disable " "Disabled master irq mask 0x%x, curmask 0x%x" "\n", val, intregm_disabled);
#line 1482 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_slavio_intctlm_mem_writel_disable(uint32_t val, uint32_t intregm_disabled)
{
    if (true) {
        _nocheck__trace_slavio_intctlm_mem_writel_disable(val, intregm_disabled);
    }
}

#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET) || \
    false)

static inline void _nocheck__trace_slavio_intctlm_mem_writel_target(uint32_t cpu)
{
    if (trace_event_get_state(TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 42 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_intctlm_mem_writel_target " "Set master irq cpu %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu);
#line 1509 "trace/trace-hw_intc.h"
        } else {
#line 42 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("slavio_intctlm_mem_writel_target " "Set master irq cpu %d" "\n", cpu);
#line 1513 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_slavio_intctlm_mem_writel_target(uint32_t cpu)
{
    if (true) {
        _nocheck__trace_slavio_intctlm_mem_writel_target(cpu);
    }
}

#define TRACE_SLAVIO_CHECK_INTERRUPTS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_CHECK_INTERRUPTS) || \
    false)

static inline void _nocheck__trace_slavio_check_interrupts(uint32_t pending, uint32_t intregm_disabled)
{
    if (trace_event_get_state(TRACE_SLAVIO_CHECK_INTERRUPTS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 43 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_check_interrupts " "pending 0x%x disabled 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , pending, intregm_disabled);
#line 1540 "trace/trace-hw_intc.h"
        } else {
#line 43 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("slavio_check_interrupts " "pending 0x%x disabled 0x%x" "\n", pending, intregm_disabled);
#line 1544 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_slavio_check_interrupts(uint32_t pending, uint32_t intregm_disabled)
{
    if (true) {
        _nocheck__trace_slavio_check_interrupts(pending, intregm_disabled);
    }
}

#define TRACE_SLAVIO_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_SET_IRQ) || \
    false)

static inline void _nocheck__trace_slavio_set_irq(uint32_t target_cpu, int irq, uint32_t pil, int level)
{
    if (trace_event_get_state(TRACE_SLAVIO_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 44 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_set_irq " "Set cpu %d irq %d -> pil %d level %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , target_cpu, irq, pil, level);
#line 1571 "trace/trace-hw_intc.h"
        } else {
#line 44 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("slavio_set_irq " "Set cpu %d irq %d -> pil %d level %d" "\n", target_cpu, irq, pil, level);
#line 1575 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_slavio_set_irq(uint32_t target_cpu, int irq, uint32_t pil, int level)
{
    if (true) {
        _nocheck__trace_slavio_set_irq(target_cpu, irq, pil, level);
    }
}

#define TRACE_SLAVIO_SET_TIMER_IRQ_CPU_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_SET_TIMER_IRQ_CPU) || \
    false)

static inline void _nocheck__trace_slavio_set_timer_irq_cpu(int cpu, int level)
{
    if (trace_event_get_state(TRACE_SLAVIO_SET_TIMER_IRQ_CPU) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 45 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_set_timer_irq_cpu " "Set cpu %d local timer level %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, level);
#line 1602 "trace/trace-hw_intc.h"
        } else {
#line 45 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("slavio_set_timer_irq_cpu " "Set cpu %d local timer level %d" "\n", cpu, level);
#line 1606 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_slavio_set_timer_irq_cpu(int cpu, int level)
{
    if (true) {
        _nocheck__trace_slavio_set_timer_irq_cpu(cpu, level);
    }
}

#define TRACE_GRLIB_IRQMP_CHECK_IRQS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_IRQMP_CHECK_IRQS) || \
    false)

static inline void _nocheck__trace_grlib_irqmp_check_irqs(uint32_t pend, uint32_t force, uint32_t mask, uint32_t lvl1, uint32_t lvl2)
{
    if (trace_event_get_state(TRACE_GRLIB_IRQMP_CHECK_IRQS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 48 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_irqmp_check_irqs " "pend:0x%04x force:0x%04x mask:0x%04x lvl1:0x%04x lvl0:0x%04x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , pend, force, mask, lvl1, lvl2);
#line 1633 "trace/trace-hw_intc.h"
        } else {
#line 48 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("grlib_irqmp_check_irqs " "pend:0x%04x force:0x%04x mask:0x%04x lvl1:0x%04x lvl0:0x%04x" "\n", pend, force, mask, lvl1, lvl2);
#line 1637 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_grlib_irqmp_check_irqs(uint32_t pend, uint32_t force, uint32_t mask, uint32_t lvl1, uint32_t lvl2)
{
    if (true) {
        _nocheck__trace_grlib_irqmp_check_irqs(pend, force, mask, lvl1, lvl2);
    }
}

#define TRACE_GRLIB_IRQMP_ACK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_IRQMP_ACK) || \
    false)

static inline void _nocheck__trace_grlib_irqmp_ack(int intno)
{
    if (trace_event_get_state(TRACE_GRLIB_IRQMP_ACK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 49 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_irqmp_ack " "interrupt:%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , intno);
#line 1664 "trace/trace-hw_intc.h"
        } else {
#line 49 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("grlib_irqmp_ack " "interrupt:%d" "\n", intno);
#line 1668 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_grlib_irqmp_ack(int intno)
{
    if (true) {
        _nocheck__trace_grlib_irqmp_ack(intno);
    }
}

#define TRACE_GRLIB_IRQMP_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_IRQMP_SET_IRQ) || \
    false)

static inline void _nocheck__trace_grlib_irqmp_set_irq(int irq)
{
    if (trace_event_get_state(TRACE_GRLIB_IRQMP_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 50 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_irqmp_set_irq " "Raise CPU IRQ %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq);
#line 1695 "trace/trace-hw_intc.h"
        } else {
#line 50 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("grlib_irqmp_set_irq " "Raise CPU IRQ %d" "\n", irq);
#line 1699 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_grlib_irqmp_set_irq(int irq)
{
    if (true) {
        _nocheck__trace_grlib_irqmp_set_irq(irq);
    }
}

#define TRACE_GRLIB_IRQMP_READL_UNKNOWN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_IRQMP_READL_UNKNOWN) || \
    false)

static inline void _nocheck__trace_grlib_irqmp_readl_unknown(uint64_t addr)
{
    if (trace_event_get_state(TRACE_GRLIB_IRQMP_READL_UNKNOWN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 51 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_irqmp_readl_unknown " "addr 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr);
#line 1726 "trace/trace-hw_intc.h"
        } else {
#line 51 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("grlib_irqmp_readl_unknown " "addr 0x%"PRIx64 "\n", addr);
#line 1730 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_grlib_irqmp_readl_unknown(uint64_t addr)
{
    if (true) {
        _nocheck__trace_grlib_irqmp_readl_unknown(addr);
    }
}

#define TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN) || \
    false)

static inline void _nocheck__trace_grlib_irqmp_writel_unknown(uint64_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 52 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_irqmp_writel_unknown " "addr 0x%"PRIx64" value 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 1757 "trace/trace-hw_intc.h"
        } else {
#line 52 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("grlib_irqmp_writel_unknown " "addr 0x%"PRIx64" value 0x%x" "\n", addr, value);
#line 1761 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_grlib_irqmp_writel_unknown(uint64_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_grlib_irqmp_writel_unknown(addr, value);
    }
}

#define TRACE_XICS_ICP_CHECK_IPI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICP_CHECK_IPI) || \
    false)

static inline void _nocheck__trace_xics_icp_check_ipi(int server, uint8_t mfrr)
{
    if (trace_event_get_state(TRACE_XICS_ICP_CHECK_IPI) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 55 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xics_icp_check_ipi " "CPU %d can take IPI mfrr=0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , server, mfrr);
#line 1788 "trace/trace-hw_intc.h"
        } else {
#line 55 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xics_icp_check_ipi " "CPU %d can take IPI mfrr=0x%x" "\n", server, mfrr);
#line 1792 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xics_icp_check_ipi(int server, uint8_t mfrr)
{
    if (true) {
        _nocheck__trace_xics_icp_check_ipi(server, mfrr);
    }
}

#define TRACE_XICS_ICP_ACCEPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICP_ACCEPT) || \
    false)

static inline void _nocheck__trace_xics_icp_accept(uint32_t old_xirr, uint32_t new_xirr)
{
    if (trace_event_get_state(TRACE_XICS_ICP_ACCEPT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 56 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xics_icp_accept " "icp_accept: XIRR 0x%"PRIx32"->0x%"PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , old_xirr, new_xirr);
#line 1819 "trace/trace-hw_intc.h"
        } else {
#line 56 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xics_icp_accept " "icp_accept: XIRR 0x%"PRIx32"->0x%"PRIx32 "\n", old_xirr, new_xirr);
#line 1823 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xics_icp_accept(uint32_t old_xirr, uint32_t new_xirr)
{
    if (true) {
        _nocheck__trace_xics_icp_accept(old_xirr, new_xirr);
    }
}

#define TRACE_XICS_ICP_EOI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICP_EOI) || \
    false)

static inline void _nocheck__trace_xics_icp_eoi(int server, uint32_t xirr, uint32_t new_xirr)
{
    if (trace_event_get_state(TRACE_XICS_ICP_EOI) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 57 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xics_icp_eoi " "icp_eoi: server %d given XIRR 0x%"PRIx32" new XIRR 0x%"PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , server, xirr, new_xirr);
#line 1850 "trace/trace-hw_intc.h"
        } else {
#line 57 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xics_icp_eoi " "icp_eoi: server %d given XIRR 0x%"PRIx32" new XIRR 0x%"PRIx32 "\n", server, xirr, new_xirr);
#line 1854 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xics_icp_eoi(int server, uint32_t xirr, uint32_t new_xirr)
{
    if (true) {
        _nocheck__trace_xics_icp_eoi(server, xirr, new_xirr);
    }
}

#define TRACE_XICS_ICP_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICP_IRQ) || \
    false)

static inline void _nocheck__trace_xics_icp_irq(int server, int nr, uint8_t priority)
{
    if (trace_event_get_state(TRACE_XICS_ICP_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 58 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xics_icp_irq " "cpu %d trying to deliver irq 0x%"PRIx32" priority 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , server, nr, priority);
#line 1881 "trace/trace-hw_intc.h"
        } else {
#line 58 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xics_icp_irq " "cpu %d trying to deliver irq 0x%"PRIx32" priority 0x%x" "\n", server, nr, priority);
#line 1885 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xics_icp_irq(int server, int nr, uint8_t priority)
{
    if (true) {
        _nocheck__trace_xics_icp_irq(server, nr, priority);
    }
}

#define TRACE_XICS_ICP_RAISE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICP_RAISE) || \
    false)

static inline void _nocheck__trace_xics_icp_raise(uint32_t xirr, uint8_t pending_priority)
{
    if (trace_event_get_state(TRACE_XICS_ICP_RAISE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 59 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xics_icp_raise " "raising IRQ new XIRR=0x%x new pending priority=0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , xirr, pending_priority);
#line 1912 "trace/trace-hw_intc.h"
        } else {
#line 59 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xics_icp_raise " "raising IRQ new XIRR=0x%x new pending priority=0x%x" "\n", xirr, pending_priority);
#line 1916 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xics_icp_raise(uint32_t xirr, uint8_t pending_priority)
{
    if (true) {
        _nocheck__trace_xics_icp_raise(xirr, pending_priority);
    }
}

#define TRACE_XICS_ICS_SET_IRQ_MSI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICS_SET_IRQ_MSI) || \
    false)

static inline void _nocheck__trace_xics_ics_set_irq_msi(int srcno, int nr)
{
    if (trace_event_get_state(TRACE_XICS_ICS_SET_IRQ_MSI) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 60 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xics_ics_set_irq_msi " "set_irq_msi: srcno %d [irq 0x%x]" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , srcno, nr);
#line 1943 "trace/trace-hw_intc.h"
        } else {
#line 60 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xics_ics_set_irq_msi " "set_irq_msi: srcno %d [irq 0x%x]" "\n", srcno, nr);
#line 1947 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xics_ics_set_irq_msi(int srcno, int nr)
{
    if (true) {
        _nocheck__trace_xics_ics_set_irq_msi(srcno, nr);
    }
}

#define TRACE_XICS_MASKED_PENDING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_MASKED_PENDING) || \
    false)

static inline void _nocheck__trace_xics_masked_pending(void)
{
    if (trace_event_get_state(TRACE_XICS_MASKED_PENDING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 61 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xics_masked_pending " "set_irq_msi: masked pending" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1974 "trace/trace-hw_intc.h"
        } else {
#line 61 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xics_masked_pending " "set_irq_msi: masked pending" "\n");
#line 1978 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xics_masked_pending(void)
{
    if (true) {
        _nocheck__trace_xics_masked_pending();
    }
}

#define TRACE_XICS_ICS_SET_IRQ_LSI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICS_SET_IRQ_LSI) || \
    false)

static inline void _nocheck__trace_xics_ics_set_irq_lsi(int srcno, int nr)
{
    if (trace_event_get_state(TRACE_XICS_ICS_SET_IRQ_LSI) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 62 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xics_ics_set_irq_lsi " "set_irq_lsi: srcno %d [irq 0x%x]" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , srcno, nr);
#line 2005 "trace/trace-hw_intc.h"
        } else {
#line 62 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xics_ics_set_irq_lsi " "set_irq_lsi: srcno %d [irq 0x%x]" "\n", srcno, nr);
#line 2009 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xics_ics_set_irq_lsi(int srcno, int nr)
{
    if (true) {
        _nocheck__trace_xics_ics_set_irq_lsi(srcno, nr);
    }
}

#define TRACE_XICS_ICS_WRITE_XIVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICS_WRITE_XIVE) || \
    false)

static inline void _nocheck__trace_xics_ics_write_xive(int nr, int srcno, int server, uint8_t priority)
{
    if (trace_event_get_state(TRACE_XICS_ICS_WRITE_XIVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 63 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xics_ics_write_xive " "ics_write_xive: irq 0x%x [src %d] server 0x%x prio 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , nr, srcno, server, priority);
#line 2036 "trace/trace-hw_intc.h"
        } else {
#line 63 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xics_ics_write_xive " "ics_write_xive: irq 0x%x [src %d] server 0x%x prio 0x%x" "\n", nr, srcno, server, priority);
#line 2040 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xics_ics_write_xive(int nr, int srcno, int server, uint8_t priority)
{
    if (true) {
        _nocheck__trace_xics_ics_write_xive(nr, srcno, server, priority);
    }
}

#define TRACE_XICS_ICS_REJECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICS_REJECT) || \
    false)

static inline void _nocheck__trace_xics_ics_reject(int nr, int srcno)
{
    if (trace_event_get_state(TRACE_XICS_ICS_REJECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 64 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xics_ics_reject " "reject irq 0x%x [src %d]" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , nr, srcno);
#line 2067 "trace/trace-hw_intc.h"
        } else {
#line 64 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xics_ics_reject " "reject irq 0x%x [src %d]" "\n", nr, srcno);
#line 2071 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xics_ics_reject(int nr, int srcno)
{
    if (true) {
        _nocheck__trace_xics_ics_reject(nr, srcno);
    }
}

#define TRACE_XICS_ICS_EOI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XICS_ICS_EOI) || \
    false)

static inline void _nocheck__trace_xics_ics_eoi(int nr)
{
    if (trace_event_get_state(TRACE_XICS_ICS_EOI) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 65 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xics_ics_eoi " "ics_eoi: irq 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , nr);
#line 2098 "trace/trace-hw_intc.h"
        } else {
#line 65 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xics_ics_eoi " "ics_eoi: irq 0x%x" "\n", nr);
#line 2102 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xics_ics_eoi(int nr)
{
    if (true) {
        _nocheck__trace_xics_ics_eoi(nr);
    }
}

#define TRACE_FLIC_CREATE_DEVICE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FLIC_CREATE_DEVICE) || \
    false)

static inline void _nocheck__trace_flic_create_device(int err)
{
    if (trace_event_get_state(TRACE_FLIC_CREATE_DEVICE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 68 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:flic_create_device " "flic: create device failed %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , err);
#line 2129 "trace/trace-hw_intc.h"
        } else {
#line 68 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("flic_create_device " "flic: create device failed %d" "\n", err);
#line 2133 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_flic_create_device(int err)
{
    if (true) {
        _nocheck__trace_flic_create_device(err);
    }
}

#define TRACE_FLIC_RESET_FAILED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_FLIC_RESET_FAILED) || \
    false)

static inline void _nocheck__trace_flic_reset_failed(int err)
{
    if (trace_event_get_state(TRACE_FLIC_RESET_FAILED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 69 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:flic_reset_failed " "flic: reset failed %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , err);
#line 2160 "trace/trace-hw_intc.h"
        } else {
#line 69 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("flic_reset_failed " "flic: reset failed %d" "\n", err);
#line 2164 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_flic_reset_failed(int err)
{
    if (true) {
        _nocheck__trace_flic_reset_failed(err);
    }
}

#define TRACE_QEMU_S390_AIRQ_SUPPRESSED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_S390_AIRQ_SUPPRESSED) || \
    false)

static inline void _nocheck__trace_qemu_s390_airq_suppressed(uint8_t type, uint8_t isc)
{
    if (trace_event_get_state(TRACE_QEMU_S390_AIRQ_SUPPRESSED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 72 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_s390_airq_suppressed " "flic: adapter I/O interrupt suppressed (type 0x%x isc 0x%x)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , type, isc);
#line 2191 "trace/trace-hw_intc.h"
        } else {
#line 72 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("qemu_s390_airq_suppressed " "flic: adapter I/O interrupt suppressed (type 0x%x isc 0x%x)" "\n", type, isc);
#line 2195 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_qemu_s390_airq_suppressed(uint8_t type, uint8_t isc)
{
    if (true) {
        _nocheck__trace_qemu_s390_airq_suppressed(type, isc);
    }
}

#define TRACE_QEMU_S390_SUPPRESS_AIRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_QEMU_S390_SUPPRESS_AIRQ) || \
    false)

static inline void _nocheck__trace_qemu_s390_suppress_airq(uint8_t isc, const char * from, const char * to)
{
    if (trace_event_get_state(TRACE_QEMU_S390_SUPPRESS_AIRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 73 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:qemu_s390_suppress_airq " "flic: for isc 0x%x, suppress airq by modifying ais mode from %s to %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , isc, from, to);
#line 2222 "trace/trace-hw_intc.h"
        } else {
#line 73 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("qemu_s390_suppress_airq " "flic: for isc 0x%x, suppress airq by modifying ais mode from %s to %s" "\n", isc, from, to);
#line 2226 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_qemu_s390_suppress_airq(uint8_t isc, const char * from, const char * to)
{
    if (true) {
        _nocheck__trace_qemu_s390_suppress_airq(isc, from, to);
    }
}

#define TRACE_ASPEED_VIC_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_VIC_SET_IRQ) || \
    false)

static inline void _nocheck__trace_aspeed_vic_set_irq(int irq, int level)
{
    if (trace_event_get_state(TRACE_ASPEED_VIC_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 76 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_vic_set_irq " "Enabling IRQ %d: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, level);
#line 2253 "trace/trace-hw_intc.h"
        } else {
#line 76 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("aspeed_vic_set_irq " "Enabling IRQ %d: %d" "\n", irq, level);
#line 2257 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_aspeed_vic_set_irq(int irq, int level)
{
    if (true) {
        _nocheck__trace_aspeed_vic_set_irq(irq, level);
    }
}

#define TRACE_ASPEED_VIC_UPDATE_FIQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_VIC_UPDATE_FIQ) || \
    false)

static inline void _nocheck__trace_aspeed_vic_update_fiq(int flags)
{
    if (trace_event_get_state(TRACE_ASPEED_VIC_UPDATE_FIQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 77 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_vic_update_fiq " "Raising FIQ: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags);
#line 2284 "trace/trace-hw_intc.h"
        } else {
#line 77 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("aspeed_vic_update_fiq " "Raising FIQ: %d" "\n", flags);
#line 2288 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_aspeed_vic_update_fiq(int flags)
{
    if (true) {
        _nocheck__trace_aspeed_vic_update_fiq(flags);
    }
}

#define TRACE_ASPEED_VIC_UPDATE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_VIC_UPDATE_IRQ) || \
    false)

static inline void _nocheck__trace_aspeed_vic_update_irq(int flags)
{
    if (trace_event_get_state(TRACE_ASPEED_VIC_UPDATE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 78 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_vic_update_irq " "Raising IRQ: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags);
#line 2315 "trace/trace-hw_intc.h"
        } else {
#line 78 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("aspeed_vic_update_irq " "Raising IRQ: %d" "\n", flags);
#line 2319 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_aspeed_vic_update_irq(int flags)
{
    if (true) {
        _nocheck__trace_aspeed_vic_update_irq(flags);
    }
}

#define TRACE_ASPEED_VIC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_VIC_READ) || \
    false)

static inline void _nocheck__trace_aspeed_vic_read(uint64_t offset, unsigned size, uint32_t value)
{
    if (trace_event_get_state(TRACE_ASPEED_VIC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 79 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_vic_read " "From 0x%" PRIx64 " of size %u: 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, size, value);
#line 2346 "trace/trace-hw_intc.h"
        } else {
#line 79 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("aspeed_vic_read " "From 0x%" PRIx64 " of size %u: 0x%" PRIx32 "\n", offset, size, value);
#line 2350 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_aspeed_vic_read(uint64_t offset, unsigned size, uint32_t value)
{
    if (true) {
        _nocheck__trace_aspeed_vic_read(offset, size, value);
    }
}

#define TRACE_ASPEED_VIC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_VIC_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_vic_write(uint64_t offset, unsigned size, uint32_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_VIC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 80 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_vic_write " "To 0x%" PRIx64 " of size %u: 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, size, data);
#line 2377 "trace/trace-hw_intc.h"
        } else {
#line 80 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("aspeed_vic_write " "To 0x%" PRIx64 " of size %u: 0x%" PRIx32 "\n", offset, size, data);
#line 2381 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_aspeed_vic_write(uint64_t offset, unsigned size, uint32_t data)
{
    if (true) {
        _nocheck__trace_aspeed_vic_write(offset, size, data);
    }
}

#define TRACE_GIC_ENABLE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_ENABLE_IRQ) || \
    false)

static inline void _nocheck__trace_gic_enable_irq(int irq)
{
    if (trace_event_get_state(TRACE_GIC_ENABLE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 83 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gic_enable_irq " "irq %d enabled" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq);
#line 2408 "trace/trace-hw_intc.h"
        } else {
#line 83 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gic_enable_irq " "irq %d enabled" "\n", irq);
#line 2412 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gic_enable_irq(int irq)
{
    if (true) {
        _nocheck__trace_gic_enable_irq(irq);
    }
}

#define TRACE_GIC_DISABLE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_DISABLE_IRQ) || \
    false)

static inline void _nocheck__trace_gic_disable_irq(int irq)
{
    if (trace_event_get_state(TRACE_GIC_DISABLE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 84 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gic_disable_irq " "irq %d disabled" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq);
#line 2439 "trace/trace-hw_intc.h"
        } else {
#line 84 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gic_disable_irq " "irq %d disabled" "\n", irq);
#line 2443 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gic_disable_irq(int irq)
{
    if (true) {
        _nocheck__trace_gic_disable_irq(irq);
    }
}

#define TRACE_GIC_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_SET_IRQ) || \
    false)

static inline void _nocheck__trace_gic_set_irq(int irq, int level, int cpumask, int target)
{
    if (trace_event_get_state(TRACE_GIC_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 85 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gic_set_irq " "irq %d level %d cpumask 0x%x target 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, level, cpumask, target);
#line 2470 "trace/trace-hw_intc.h"
        } else {
#line 85 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gic_set_irq " "irq %d level %d cpumask 0x%x target 0x%x" "\n", irq, level, cpumask, target);
#line 2474 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gic_set_irq(int irq, int level, int cpumask, int target)
{
    if (true) {
        _nocheck__trace_gic_set_irq(irq, level, cpumask, target);
    }
}

#define TRACE_GIC_UPDATE_BESTIRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_UPDATE_BESTIRQ) || \
    false)

static inline void _nocheck__trace_gic_update_bestirq(const char * s, int cpu, int irq, int prio, int priority_mask, int running_priority)
{
    if (trace_event_get_state(TRACE_GIC_UPDATE_BESTIRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 86 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gic_update_bestirq " "%s %d irq %d priority %d cpu priority mask %d cpu running priority %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , s, cpu, irq, prio, priority_mask, running_priority);
#line 2501 "trace/trace-hw_intc.h"
        } else {
#line 86 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gic_update_bestirq " "%s %d irq %d priority %d cpu priority mask %d cpu running priority %d" "\n", s, cpu, irq, prio, priority_mask, running_priority);
#line 2505 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gic_update_bestirq(const char * s, int cpu, int irq, int prio, int priority_mask, int running_priority)
{
    if (true) {
        _nocheck__trace_gic_update_bestirq(s, cpu, irq, prio, priority_mask, running_priority);
    }
}

#define TRACE_GIC_UPDATE_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_UPDATE_SET_IRQ) || \
    false)

static inline void _nocheck__trace_gic_update_set_irq(int cpu, const char * name, int level)
{
    if (trace_event_get_state(TRACE_GIC_UPDATE_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 87 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gic_update_set_irq " "cpu[%d]: %s = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, name, level);
#line 2532 "trace/trace-hw_intc.h"
        } else {
#line 87 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gic_update_set_irq " "cpu[%d]: %s = %d" "\n", cpu, name, level);
#line 2536 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gic_update_set_irq(int cpu, const char * name, int level)
{
    if (true) {
        _nocheck__trace_gic_update_set_irq(cpu, name, level);
    }
}

#define TRACE_GIC_ACKNOWLEDGE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_ACKNOWLEDGE_IRQ) || \
    false)

static inline void _nocheck__trace_gic_acknowledge_irq(const char * s, int cpu, int irq)
{
    if (trace_event_get_state(TRACE_GIC_ACKNOWLEDGE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 88 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gic_acknowledge_irq " "%s %d acknowledged irq %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , s, cpu, irq);
#line 2563 "trace/trace-hw_intc.h"
        } else {
#line 88 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gic_acknowledge_irq " "%s %d acknowledged irq %d" "\n", s, cpu, irq);
#line 2567 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gic_acknowledge_irq(const char * s, int cpu, int irq)
{
    if (true) {
        _nocheck__trace_gic_acknowledge_irq(s, cpu, irq);
    }
}

#define TRACE_GIC_CPU_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_CPU_WRITE) || \
    false)

static inline void _nocheck__trace_gic_cpu_write(const char * s, int cpu, int addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_GIC_CPU_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 89 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gic_cpu_write " "%s %d iface write at 0x%08x 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , s, cpu, addr, val);
#line 2594 "trace/trace-hw_intc.h"
        } else {
#line 89 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gic_cpu_write " "%s %d iface write at 0x%08x 0x%08" PRIx32 "\n", s, cpu, addr, val);
#line 2598 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gic_cpu_write(const char * s, int cpu, int addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_gic_cpu_write(s, cpu, addr, val);
    }
}

#define TRACE_GIC_CPU_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_CPU_READ) || \
    false)

static inline void _nocheck__trace_gic_cpu_read(const char * s, int cpu, int addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_GIC_CPU_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 90 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gic_cpu_read " "%s %d iface read at 0x%08x: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , s, cpu, addr, val);
#line 2625 "trace/trace-hw_intc.h"
        } else {
#line 90 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gic_cpu_read " "%s %d iface read at 0x%08x: 0x%08" PRIx32 "\n", s, cpu, addr, val);
#line 2629 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gic_cpu_read(const char * s, int cpu, int addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_gic_cpu_read(s, cpu, addr, val);
    }
}

#define TRACE_GIC_HYP_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_HYP_READ) || \
    false)

static inline void _nocheck__trace_gic_hyp_read(int addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_GIC_HYP_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 91 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gic_hyp_read " "hyp read at 0x%08x: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 2656 "trace/trace-hw_intc.h"
        } else {
#line 91 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gic_hyp_read " "hyp read at 0x%08x: 0x%08" PRIx32 "\n", addr, val);
#line 2660 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gic_hyp_read(int addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_gic_hyp_read(addr, val);
    }
}

#define TRACE_GIC_HYP_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_HYP_WRITE) || \
    false)

static inline void _nocheck__trace_gic_hyp_write(int addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_GIC_HYP_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 92 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gic_hyp_write " "hyp write at 0x%08x: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 2687 "trace/trace-hw_intc.h"
        } else {
#line 92 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gic_hyp_write " "hyp write at 0x%08x: 0x%08" PRIx32 "\n", addr, val);
#line 2691 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gic_hyp_write(int addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_gic_hyp_write(addr, val);
    }
}

#define TRACE_GIC_DIST_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_DIST_READ) || \
    false)

static inline void _nocheck__trace_gic_dist_read(int addr, unsigned int size, uint32_t val)
{
    if (trace_event_get_state(TRACE_GIC_DIST_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 93 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gic_dist_read " "dist read at 0x%08x size %u: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, val);
#line 2718 "trace/trace-hw_intc.h"
        } else {
#line 93 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gic_dist_read " "dist read at 0x%08x size %u: 0x%08" PRIx32 "\n", addr, size, val);
#line 2722 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gic_dist_read(int addr, unsigned int size, uint32_t val)
{
    if (true) {
        _nocheck__trace_gic_dist_read(addr, size, val);
    }
}

#define TRACE_GIC_DIST_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_DIST_WRITE) || \
    false)

static inline void _nocheck__trace_gic_dist_write(int addr, unsigned int size, uint32_t val)
{
    if (trace_event_get_state(TRACE_GIC_DIST_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 94 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gic_dist_write " "dist write at 0x%08x size %u: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, val);
#line 2749 "trace/trace-hw_intc.h"
        } else {
#line 94 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gic_dist_write " "dist write at 0x%08x size %u: 0x%08" PRIx32 "\n", addr, size, val);
#line 2753 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gic_dist_write(int addr, unsigned int size, uint32_t val)
{
    if (true) {
        _nocheck__trace_gic_dist_write(addr, size, val);
    }
}

#define TRACE_GIC_LR_ENTRY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_LR_ENTRY) || \
    false)

static inline void _nocheck__trace_gic_lr_entry(int cpu, int entry, uint32_t val)
{
    if (trace_event_get_state(TRACE_GIC_LR_ENTRY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 95 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gic_lr_entry " "cpu %d: new lr entry %d: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, entry, val);
#line 2780 "trace/trace-hw_intc.h"
        } else {
#line 95 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gic_lr_entry " "cpu %d: new lr entry %d: 0x%08" PRIx32 "\n", cpu, entry, val);
#line 2784 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gic_lr_entry(int cpu, int entry, uint32_t val)
{
    if (true) {
        _nocheck__trace_gic_lr_entry(cpu, entry, val);
    }
}

#define TRACE_GIC_UPDATE_MAINTENANCE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GIC_UPDATE_MAINTENANCE_IRQ) || \
    false)

static inline void _nocheck__trace_gic_update_maintenance_irq(int cpu, int val)
{
    if (trace_event_get_state(TRACE_GIC_UPDATE_MAINTENANCE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 96 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gic_update_maintenance_irq " "cpu %d: maintenance = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 2811 "trace/trace-hw_intc.h"
        } else {
#line 96 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gic_update_maintenance_irq " "cpu %d: maintenance = %d" "\n", cpu, val);
#line 2815 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gic_update_maintenance_irq(int cpu, int val)
{
    if (true) {
        _nocheck__trace_gic_update_maintenance_irq(cpu, val);
    }
}

#define TRACE_GICV3_ICC_PMR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_PMR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_pmr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_PMR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 99 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_pmr_read " "GICv3 ICC_PMR read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 2842 "trace/trace-hw_intc.h"
        } else {
#line 99 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_pmr_read " "GICv3 ICC_PMR read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 2846 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_pmr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_pmr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_PMR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_PMR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_pmr_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_PMR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 100 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_pmr_write " "GICv3 ICC_PMR write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 2873 "trace/trace-hw_intc.h"
        } else {
#line 100 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_pmr_write " "GICv3 ICC_PMR write cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 2877 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_pmr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_pmr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICC_BPR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_BPR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_bpr_read(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_BPR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 101 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_bpr_read " "GICv3 ICC_BPR%d read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, cpu, val);
#line 2904 "trace/trace-hw_intc.h"
        } else {
#line 101 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_bpr_read " "GICv3 ICC_BPR%d read cpu 0x%x value 0x%" PRIx64 "\n", grp, cpu, val);
#line 2908 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_bpr_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_bpr_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICC_BPR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_BPR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_bpr_write(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_BPR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 102 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_bpr_write " "GICv3 ICC_BPR%d write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, cpu, val);
#line 2935 "trace/trace-hw_intc.h"
        } else {
#line 102 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_bpr_write " "GICv3 ICC_BPR%d write cpu 0x%x value 0x%" PRIx64 "\n", grp, cpu, val);
#line 2939 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_bpr_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_bpr_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICC_AP_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_AP_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_AP_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 103 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_ap_read " "GICv3 ICC_AP%dR%d read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, regno, cpu, val);
#line 2966 "trace/trace-hw_intc.h"
        } else {
#line 103 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_ap_read " "GICv3 ICC_AP%dR%d read cpu 0x%x value 0x%" PRIx64 "\n", grp, regno, cpu, val);
#line 2970 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ap_read(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICC_AP_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_AP_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_AP_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 104 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_ap_write " "GICv3 ICC_AP%dR%d write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, regno, cpu, val);
#line 2997 "trace/trace-hw_intc.h"
        } else {
#line 104 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_ap_write " "GICv3 ICC_AP%dR%d write cpu 0x%x value 0x%" PRIx64 "\n", grp, regno, cpu, val);
#line 3001 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ap_write(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICC_IGRPEN_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_IGRPEN_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_igrpen_read(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_IGRPEN_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 105 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_igrpen_read " "GICv3 ICC_IGRPEN%d read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, cpu, val);
#line 3028 "trace/trace-hw_intc.h"
        } else {
#line 105 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_igrpen_read " "GICv3 ICC_IGRPEN%d read cpu 0x%x value 0x%" PRIx64 "\n", grp, cpu, val);
#line 3032 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_igrpen_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_igrpen_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICC_IGRPEN_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_IGRPEN_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_igrpen_write(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_IGRPEN_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 106 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_igrpen_write " "GICv3 ICC_IGRPEN%d write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, cpu, val);
#line 3059 "trace/trace-hw_intc.h"
        } else {
#line 106 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_igrpen_write " "GICv3 ICC_IGRPEN%d write cpu 0x%x value 0x%" PRIx64 "\n", grp, cpu, val);
#line 3063 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_igrpen_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_igrpen_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICC_IGRPEN1_EL3_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_IGRPEN1_EL3_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_igrpen1_el3_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_IGRPEN1_EL3_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 107 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_igrpen1_el3_read " "GICv3 ICC_IGRPEN1_EL3 read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3090 "trace/trace-hw_intc.h"
        } else {
#line 107 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_igrpen1_el3_read " "GICv3 ICC_IGRPEN1_EL3 read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3094 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_igrpen1_el3_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_igrpen1_el3_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_igrpen1_el3_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 108 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_igrpen1_el3_write " "GICv3 ICC_IGRPEN1_EL3 write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3121 "trace/trace-hw_intc.h"
        } else {
#line 108 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_igrpen1_el3_write " "GICv3 ICC_IGRPEN1_EL3 write cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3125 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_igrpen1_el3_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_igrpen1_el3_write(cpu, val);
    }
}

#define TRACE_GICV3_ICC_CTLR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_CTLR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_ctlr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_CTLR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 109 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_ctlr_read " "GICv3 ICC_CTLR read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3152 "trace/trace-hw_intc.h"
        } else {
#line 109 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_ctlr_read " "GICv3 ICC_CTLR read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3156 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_ctlr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ctlr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_CTLR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_CTLR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_ctlr_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_CTLR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 110 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_ctlr_write " "GICv3 ICC_CTLR write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3183 "trace/trace-hw_intc.h"
        } else {
#line 110 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_ctlr_write " "GICv3 ICC_CTLR write cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3187 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_ctlr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ctlr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICC_CTLR_EL3_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_CTLR_EL3_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_ctlr_el3_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_CTLR_EL3_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 111 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_ctlr_el3_read " "GICv3 ICC_CTLR_EL3 read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3214 "trace/trace-hw_intc.h"
        } else {
#line 111 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_ctlr_el3_read " "GICv3 ICC_CTLR_EL3 read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3218 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_ctlr_el3_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ctlr_el3_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_CTLR_EL3_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_CTLR_EL3_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_ctlr_el3_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_CTLR_EL3_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 112 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_ctlr_el3_write " "GICv3 ICC_CTLR_EL3 write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3245 "trace/trace-hw_intc.h"
        } else {
#line 112 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_ctlr_el3_write " "GICv3 ICC_CTLR_EL3 write cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3249 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_ctlr_el3_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ctlr_el3_write(cpu, val);
    }
}

#define TRACE_GICV3_CPUIF_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_CPUIF_UPDATE) || \
    false)

static inline void _nocheck__trace_gicv3_cpuif_update(uint32_t cpuid, int irq, int grp, int prio)
{
    if (trace_event_get_state(TRACE_GICV3_CPUIF_UPDATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 113 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_cpuif_update " "GICv3 CPU i/f 0x%x HPPI update: irq %d group %d prio %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpuid, irq, grp, prio);
#line 3276 "trace/trace-hw_intc.h"
        } else {
#line 113 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_cpuif_update " "GICv3 CPU i/f 0x%x HPPI update: irq %d group %d prio %d" "\n", cpuid, irq, grp, prio);
#line 3280 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_cpuif_update(uint32_t cpuid, int irq, int grp, int prio)
{
    if (true) {
        _nocheck__trace_gicv3_cpuif_update(cpuid, irq, grp, prio);
    }
}

#define TRACE_GICV3_CPUIF_SET_IRQS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_CPUIF_SET_IRQS) || \
    false)

static inline void _nocheck__trace_gicv3_cpuif_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel)
{
    if (trace_event_get_state(TRACE_GICV3_CPUIF_SET_IRQS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 114 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_cpuif_set_irqs " "GICv3 CPU i/f 0x%x HPPI update: setting FIQ %d IRQ %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpuid, fiqlevel, irqlevel);
#line 3307 "trace/trace-hw_intc.h"
        } else {
#line 114 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_cpuif_set_irqs " "GICv3 CPU i/f 0x%x HPPI update: setting FIQ %d IRQ %d" "\n", cpuid, fiqlevel, irqlevel);
#line 3311 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_cpuif_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel)
{
    if (true) {
        _nocheck__trace_gicv3_cpuif_set_irqs(cpuid, fiqlevel, irqlevel);
    }
}

#define TRACE_GICV3_ICC_GENERATE_SGI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_GENERATE_SGI) || \
    false)

static inline void _nocheck__trace_gicv3_icc_generate_sgi(uint32_t cpuid, int irq, int irm, uint32_t aff, uint32_t targetlist)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_GENERATE_SGI) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 115 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_generate_sgi " "GICv3 CPU i/f 0x%x generating SGI %d IRM %d target affinity 0x%xxx targetlist 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpuid, irq, irm, aff, targetlist);
#line 3338 "trace/trace-hw_intc.h"
        } else {
#line 115 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_generate_sgi " "GICv3 CPU i/f 0x%x generating SGI %d IRM %d target affinity 0x%xxx targetlist 0x%x" "\n", cpuid, irq, irm, aff, targetlist);
#line 3342 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_generate_sgi(uint32_t cpuid, int irq, int irm, uint32_t aff, uint32_t targetlist)
{
    if (true) {
        _nocheck__trace_gicv3_icc_generate_sgi(cpuid, irq, irm, aff, targetlist);
    }
}

#define TRACE_GICV3_ICC_IAR0_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_IAR0_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_iar0_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_IAR0_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 116 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_iar0_read " "GICv3 ICC_IAR0 read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3369 "trace/trace-hw_intc.h"
        } else {
#line 116 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_iar0_read " "GICv3 ICC_IAR0 read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3373 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_iar0_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_iar0_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_IAR1_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_IAR1_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_iar1_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_IAR1_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 117 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_iar1_read " "GICv3 ICC_IAR1 read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3400 "trace/trace-hw_intc.h"
        } else {
#line 117 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_iar1_read " "GICv3 ICC_IAR1 read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3404 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_iar1_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_iar1_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_EOIR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_EOIR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_eoir_write(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_EOIR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 118 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_eoir_write " "GICv3 ICC_EOIR%d write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, cpu, val);
#line 3431 "trace/trace-hw_intc.h"
        } else {
#line 118 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_eoir_write " "GICv3 ICC_EOIR%d write cpu 0x%x value 0x%" PRIx64 "\n", grp, cpu, val);
#line 3435 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_eoir_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_eoir_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICC_HPPIR0_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_HPPIR0_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_hppir0_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_HPPIR0_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 119 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_hppir0_read " "GICv3 ICC_HPPIR0 read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3462 "trace/trace-hw_intc.h"
        } else {
#line 119 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_hppir0_read " "GICv3 ICC_HPPIR0 read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3466 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_hppir0_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_hppir0_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_HPPIR1_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_HPPIR1_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_hppir1_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_HPPIR1_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 120 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_hppir1_read " "GICv3 ICC_HPPIR1 read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3493 "trace/trace-hw_intc.h"
        } else {
#line 120 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_hppir1_read " "GICv3 ICC_HPPIR1 read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3497 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_hppir1_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_hppir1_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_DIR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_DIR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icc_dir_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_DIR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 121 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_dir_write " "GICv3 ICC_DIR write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3524 "trace/trace-hw_intc.h"
        } else {
#line 121 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_dir_write " "GICv3 ICC_DIR write cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3528 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_dir_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_dir_write(cpu, val);
    }
}

#define TRACE_GICV3_ICC_RPR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICC_RPR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icc_rpr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICC_RPR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 122 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icc_rpr_read " "GICv3 ICC_RPR read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3555 "trace/trace-hw_intc.h"
        } else {
#line 122 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icc_rpr_read " "GICv3 ICC_RPR read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3559 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icc_rpr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_rpr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_AP_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_AP_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_AP_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 123 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_ap_read " "GICv3 ICH_AP%dR%d read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, regno, cpu, val);
#line 3586 "trace/trace-hw_intc.h"
        } else {
#line 123 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_ap_read " "GICv3 ICH_AP%dR%d read cpu 0x%x value 0x%" PRIx64 "\n", grp, regno, cpu, val);
#line 3590 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_ap_read(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_AP_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_AP_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_ich_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_AP_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 124 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_ap_write " "GICv3 ICH_AP%dR%d write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, regno, cpu, val);
#line 3617 "trace/trace-hw_intc.h"
        } else {
#line 124 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_ap_write " "GICv3 ICH_AP%dR%d write cpu 0x%x value 0x%" PRIx64 "\n", grp, regno, cpu, val);
#line 3621 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_ap_write(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_HCR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_HCR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_hcr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_HCR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 125 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_hcr_read " "GICv3 ICH_HCR_EL2 read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3648 "trace/trace-hw_intc.h"
        } else {
#line 125 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_hcr_read " "GICv3 ICH_HCR_EL2 read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3652 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_hcr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_hcr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_HCR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_HCR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_ich_hcr_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_HCR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 126 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_hcr_write " "GICv3 ICH_HCR_EL2 write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3679 "trace/trace-hw_intc.h"
        } else {
#line 126 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_hcr_write " "GICv3 ICH_HCR_EL2 write cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3683 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_hcr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_hcr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICH_VMCR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_VMCR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_vmcr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_VMCR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 127 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_vmcr_read " "GICv3 ICH_VMCR_EL2 read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3710 "trace/trace-hw_intc.h"
        } else {
#line 127 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_vmcr_read " "GICv3 ICH_VMCR_EL2 read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3714 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_vmcr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_vmcr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_VMCR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_VMCR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_ich_vmcr_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_VMCR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 128 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_vmcr_write " "GICv3 ICH_VMCR_EL2 write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3741 "trace/trace-hw_intc.h"
        } else {
#line 128 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_vmcr_write " "GICv3 ICH_VMCR_EL2 write cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3745 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_vmcr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_vmcr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICH_LR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_LR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_lr_read(int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_LR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 129 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_lr_read " "GICv3 ICH_LR%d_EL2 read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , regno, cpu, val);
#line 3772 "trace/trace-hw_intc.h"
        } else {
#line 129 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_lr_read " "GICv3 ICH_LR%d_EL2 read cpu 0x%x value 0x%" PRIx64 "\n", regno, cpu, val);
#line 3776 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_lr_read(int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lr_read(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_LR32_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_LR32_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_lr32_read(int regno, uint32_t cpu, uint32_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_LR32_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 130 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_lr32_read " "GICv3 ICH_LR%d read cpu 0x%x value 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , regno, cpu, val);
#line 3803 "trace/trace-hw_intc.h"
        } else {
#line 130 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_lr32_read " "GICv3 ICH_LR%d read cpu 0x%x value 0x%" PRIx32 "\n", regno, cpu, val);
#line 3807 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_lr32_read(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lr32_read(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_LRC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_LRC_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_lrc_read(int regno, uint32_t cpu, uint32_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_LRC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 131 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_lrc_read " "GICv3 ICH_LRC%d read cpu 0x%x value 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , regno, cpu, val);
#line 3834 "trace/trace-hw_intc.h"
        } else {
#line 131 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_lrc_read " "GICv3 ICH_LRC%d read cpu 0x%x value 0x%" PRIx32 "\n", regno, cpu, val);
#line 3838 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_lrc_read(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lrc_read(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_LR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_LR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_ich_lr_write(int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_LR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 132 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_lr_write " "GICv3 ICH_LR%d_EL2 write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , regno, cpu, val);
#line 3865 "trace/trace-hw_intc.h"
        } else {
#line 132 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_lr_write " "GICv3 ICH_LR%d_EL2 write cpu 0x%x value 0x%" PRIx64 "\n", regno, cpu, val);
#line 3869 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_lr_write(int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lr_write(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_LR32_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_LR32_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_ich_lr32_write(int regno, uint32_t cpu, uint32_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_LR32_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 133 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_lr32_write " "GICv3 ICH_LR%d write cpu 0x%x value 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , regno, cpu, val);
#line 3896 "trace/trace-hw_intc.h"
        } else {
#line 133 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_lr32_write " "GICv3 ICH_LR%d write cpu 0x%x value 0x%" PRIx32 "\n", regno, cpu, val);
#line 3900 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_lr32_write(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lr32_write(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_LRC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_LRC_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_ich_lrc_write(int regno, uint32_t cpu, uint32_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_LRC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 134 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_lrc_write " "GICv3 ICH_LRC%d write cpu 0x%x value 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , regno, cpu, val);
#line 3927 "trace/trace-hw_intc.h"
        } else {
#line 134 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_lrc_write " "GICv3 ICH_LRC%d write cpu 0x%x value 0x%" PRIx32 "\n", regno, cpu, val);
#line 3931 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_lrc_write(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lrc_write(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_VTR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_VTR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_vtr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_VTR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 135 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_vtr_read " "GICv3 ICH_VTR read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3958 "trace/trace-hw_intc.h"
        } else {
#line 135 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_vtr_read " "GICv3 ICH_VTR read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3962 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_vtr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_vtr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_MISR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_MISR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_misr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_MISR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 136 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_misr_read " "GICv3 ICH_MISR read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 3989 "trace/trace-hw_intc.h"
        } else {
#line 136 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_misr_read " "GICv3 ICH_MISR read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 3993 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_misr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_misr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_EISR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_EISR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_eisr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_EISR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 137 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_eisr_read " "GICv3 ICH_EISR read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 4020 "trace/trace-hw_intc.h"
        } else {
#line 137 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_eisr_read " "GICv3 ICH_EISR read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 4024 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_eisr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_eisr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_ELRSR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICH_ELRSR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_ich_elrsr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICH_ELRSR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 138 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_ich_elrsr_read " "GICv3 ICH_ELRSR read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 4051 "trace/trace-hw_intc.h"
        } else {
#line 138 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_ich_elrsr_read " "GICv3 ICH_ELRSR read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 4055 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_ich_elrsr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_elrsr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICV_AP_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_AP_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_AP_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 139 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icv_ap_read " "GICv3 ICV_AP%dR%d read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, regno, cpu, val);
#line 4082 "trace/trace-hw_intc.h"
        } else {
#line 139 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icv_ap_read " "GICv3 ICV_AP%dR%d read cpu 0x%x value 0x%" PRIx64 "\n", grp, regno, cpu, val);
#line 4086 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icv_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_ap_read(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICV_AP_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_AP_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icv_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_AP_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 140 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icv_ap_write " "GICv3 ICV_AP%dR%d write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, regno, cpu, val);
#line 4113 "trace/trace-hw_intc.h"
        } else {
#line 140 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icv_ap_write " "GICv3 ICV_AP%dR%d write cpu 0x%x value 0x%" PRIx64 "\n", grp, regno, cpu, val);
#line 4117 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icv_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_ap_write(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICV_BPR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_BPR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_bpr_read(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_BPR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 141 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icv_bpr_read " "GICv3 ICV_BPR%d read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, cpu, val);
#line 4144 "trace/trace-hw_intc.h"
        } else {
#line 141 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icv_bpr_read " "GICv3 ICV_BPR%d read cpu 0x%x value 0x%" PRIx64 "\n", grp, cpu, val);
#line 4148 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icv_bpr_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_bpr_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_BPR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_BPR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icv_bpr_write(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_BPR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 142 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icv_bpr_write " "GICv3 ICV_BPR%d write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, cpu, val);
#line 4175 "trace/trace-hw_intc.h"
        } else {
#line 142 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icv_bpr_write " "GICv3 ICV_BPR%d write cpu 0x%x value 0x%" PRIx64 "\n", grp, cpu, val);
#line 4179 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icv_bpr_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_bpr_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_PMR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_PMR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_pmr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_PMR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 143 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icv_pmr_read " "GICv3 ICV_PMR read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 4206 "trace/trace-hw_intc.h"
        } else {
#line 143 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icv_pmr_read " "GICv3 ICV_PMR read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 4210 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icv_pmr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_pmr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICV_PMR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_PMR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icv_pmr_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_PMR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 144 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icv_pmr_write " "GICv3 ICV_PMR write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 4237 "trace/trace-hw_intc.h"
        } else {
#line 144 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icv_pmr_write " "GICv3 ICV_PMR write cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 4241 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icv_pmr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_pmr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICV_IGRPEN_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_IGRPEN_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_igrpen_read(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_IGRPEN_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 145 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icv_igrpen_read " "GICv3 ICV_IGRPEN%d read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, cpu, val);
#line 4268 "trace/trace-hw_intc.h"
        } else {
#line 145 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icv_igrpen_read " "GICv3 ICV_IGRPEN%d read cpu 0x%x value 0x%" PRIx64 "\n", grp, cpu, val);
#line 4272 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icv_igrpen_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_igrpen_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_IGRPEN_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_IGRPEN_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icv_igrpen_write(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_IGRPEN_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 146 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icv_igrpen_write " "GICv3 ICV_IGRPEN%d write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, cpu, val);
#line 4299 "trace/trace-hw_intc.h"
        } else {
#line 146 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icv_igrpen_write " "GICv3 ICV_IGRPEN%d write cpu 0x%x value 0x%" PRIx64 "\n", grp, cpu, val);
#line 4303 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icv_igrpen_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_igrpen_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_CTLR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_CTLR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_ctlr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_CTLR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 147 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icv_ctlr_read " "GICv3 ICV_CTLR read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 4330 "trace/trace-hw_intc.h"
        } else {
#line 147 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icv_ctlr_read " "GICv3 ICV_CTLR read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 4334 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icv_ctlr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_ctlr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICV_CTLR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_CTLR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icv_ctlr_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_CTLR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 148 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icv_ctlr_write " "GICv3 ICV_CTLR write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 4361 "trace/trace-hw_intc.h"
        } else {
#line 148 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icv_ctlr_write " "GICv3 ICV_CTLR write cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 4365 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icv_ctlr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_ctlr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICV_RPR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_RPR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_rpr_read(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_RPR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 149 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icv_rpr_read " "GICv3 ICV_RPR read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 4392 "trace/trace-hw_intc.h"
        } else {
#line 149 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icv_rpr_read " "GICv3 ICV_RPR read cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 4396 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icv_rpr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_rpr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICV_HPPIR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_HPPIR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_hppir_read(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_HPPIR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 150 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icv_hppir_read " "GICv3 ICV_HPPIR%d read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, cpu, val);
#line 4423 "trace/trace-hw_intc.h"
        } else {
#line 150 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icv_hppir_read " "GICv3 ICV_HPPIR%d read cpu 0x%x value 0x%" PRIx64 "\n", grp, cpu, val);
#line 4427 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icv_hppir_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_hppir_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_DIR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_DIR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icv_dir_write(uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_DIR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 151 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icv_dir_write " "GICv3 ICV_DIR write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, val);
#line 4454 "trace/trace-hw_intc.h"
        } else {
#line 151 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icv_dir_write " "GICv3 ICV_DIR write cpu 0x%x value 0x%" PRIx64 "\n", cpu, val);
#line 4458 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icv_dir_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_dir_write(cpu, val);
    }
}

#define TRACE_GICV3_ICV_IAR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_IAR_READ) || \
    false)

static inline void _nocheck__trace_gicv3_icv_iar_read(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_IAR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 152 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icv_iar_read " "GICv3 ICV_IAR%d read cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, cpu, val);
#line 4485 "trace/trace-hw_intc.h"
        } else {
#line 152 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icv_iar_read " "GICv3 ICV_IAR%d read cpu 0x%x value 0x%" PRIx64 "\n", grp, cpu, val);
#line 4489 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icv_iar_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_iar_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_EOIR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_ICV_EOIR_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_icv_eoir_write(int grp, uint32_t cpu, uint64_t val)
{
    if (trace_event_get_state(TRACE_GICV3_ICV_EOIR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 153 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_icv_eoir_write " "GICv3 ICV_EOIR%d write cpu 0x%x value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , grp, cpu, val);
#line 4516 "trace/trace-hw_intc.h"
        } else {
#line 153 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_icv_eoir_write " "GICv3 ICV_EOIR%d write cpu 0x%x value 0x%" PRIx64 "\n", grp, cpu, val);
#line 4520 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_icv_eoir_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_eoir_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_CPUIF_VIRT_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_CPUIF_VIRT_UPDATE) || \
    false)

static inline void _nocheck__trace_gicv3_cpuif_virt_update(uint32_t cpuid, int idx)
{
    if (trace_event_get_state(TRACE_GICV3_CPUIF_VIRT_UPDATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 154 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_cpuif_virt_update " "GICv3 CPU i/f 0x%x virt HPPI update LR index %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpuid, idx);
#line 4547 "trace/trace-hw_intc.h"
        } else {
#line 154 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_cpuif_virt_update " "GICv3 CPU i/f 0x%x virt HPPI update LR index %d" "\n", cpuid, idx);
#line 4551 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_cpuif_virt_update(uint32_t cpuid, int idx)
{
    if (true) {
        _nocheck__trace_gicv3_cpuif_virt_update(cpuid, idx);
    }
}

#define TRACE_GICV3_CPUIF_VIRT_SET_IRQS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_CPUIF_VIRT_SET_IRQS) || \
    false)

static inline void _nocheck__trace_gicv3_cpuif_virt_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel, int maintlevel)
{
    if (trace_event_get_state(TRACE_GICV3_CPUIF_VIRT_SET_IRQS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 155 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_cpuif_virt_set_irqs " "GICv3 CPU i/f 0x%x virt HPPI update: setting FIQ %d IRQ %d maintenance-irq %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpuid, fiqlevel, irqlevel, maintlevel);
#line 4578 "trace/trace-hw_intc.h"
        } else {
#line 155 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_cpuif_virt_set_irqs " "GICv3 CPU i/f 0x%x virt HPPI update: setting FIQ %d IRQ %d maintenance-irq %d" "\n", cpuid, fiqlevel, irqlevel, maintlevel);
#line 4582 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_cpuif_virt_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel, int maintlevel)
{
    if (true) {
        _nocheck__trace_gicv3_cpuif_virt_set_irqs(cpuid, fiqlevel, irqlevel, maintlevel);
    }
}

#define TRACE_GICV3_DIST_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_DIST_READ) || \
    false)

static inline void _nocheck__trace_gicv3_dist_read(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_DIST_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 158 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_dist_read " "GICv3 distributor read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size, secure);
#line 4609 "trace/trace-hw_intc.h"
        } else {
#line 158 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_dist_read " "GICv3 distributor read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n", offset, data, size, secure);
#line 4613 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_dist_read(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_dist_read(offset, data, size, secure);
    }
}

#define TRACE_GICV3_DIST_BADREAD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_DIST_BADREAD) || \
    false)

static inline void _nocheck__trace_gicv3_dist_badread(uint64_t offset, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_DIST_BADREAD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 159 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_dist_badread " "GICv3 distributor read: offset 0x%" PRIx64 " size %u secure %d: error" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, size, secure);
#line 4640 "trace/trace-hw_intc.h"
        } else {
#line 159 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_dist_badread " "GICv3 distributor read: offset 0x%" PRIx64 " size %u secure %d: error" "\n", offset, size, secure);
#line 4644 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_dist_badread(uint64_t offset, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_dist_badread(offset, size, secure);
    }
}

#define TRACE_GICV3_DIST_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_DIST_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_dist_write(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_DIST_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 160 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_dist_write " "GICv3 distributor write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size, secure);
#line 4671 "trace/trace-hw_intc.h"
        } else {
#line 160 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_dist_write " "GICv3 distributor write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n", offset, data, size, secure);
#line 4675 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_dist_write(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_dist_write(offset, data, size, secure);
    }
}

#define TRACE_GICV3_DIST_BADWRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_DIST_BADWRITE) || \
    false)

static inline void _nocheck__trace_gicv3_dist_badwrite(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_DIST_BADWRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 161 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_dist_badwrite " "GICv3 distributor write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d: error" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size, secure);
#line 4702 "trace/trace-hw_intc.h"
        } else {
#line 161 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_dist_badwrite " "GICv3 distributor write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d: error" "\n", offset, data, size, secure);
#line 4706 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_dist_badwrite(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_dist_badwrite(offset, data, size, secure);
    }
}

#define TRACE_GICV3_DIST_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_DIST_SET_IRQ) || \
    false)

static inline void _nocheck__trace_gicv3_dist_set_irq(int irq, int level)
{
    if (trace_event_get_state(TRACE_GICV3_DIST_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 162 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_dist_set_irq " "GICv3 distributor interrupt %d level changed to %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, level);
#line 4733 "trace/trace-hw_intc.h"
        } else {
#line 162 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_dist_set_irq " "GICv3 distributor interrupt %d level changed to %d" "\n", irq, level);
#line 4737 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_dist_set_irq(int irq, int level)
{
    if (true) {
        _nocheck__trace_gicv3_dist_set_irq(irq, level);
    }
}

#define TRACE_GICV3_REDIST_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_REDIST_READ) || \
    false)

static inline void _nocheck__trace_gicv3_redist_read(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_REDIST_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 165 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_redist_read " "GICv3 redistributor 0x%x read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, offset, data, size, secure);
#line 4764 "trace/trace-hw_intc.h"
        } else {
#line 165 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_redist_read " "GICv3 redistributor 0x%x read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n", cpu, offset, data, size, secure);
#line 4768 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_redist_read(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_redist_read(cpu, offset, data, size, secure);
    }
}

#define TRACE_GICV3_REDIST_BADREAD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_REDIST_BADREAD) || \
    false)

static inline void _nocheck__trace_gicv3_redist_badread(uint32_t cpu, uint64_t offset, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_REDIST_BADREAD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 166 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_redist_badread " "GICv3 redistributor 0x%x read: offset 0x%" PRIx64 " size %u secure %d: error" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, offset, size, secure);
#line 4795 "trace/trace-hw_intc.h"
        } else {
#line 166 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_redist_badread " "GICv3 redistributor 0x%x read: offset 0x%" PRIx64 " size %u secure %d: error" "\n", cpu, offset, size, secure);
#line 4799 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_redist_badread(uint32_t cpu, uint64_t offset, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_redist_badread(cpu, offset, size, secure);
    }
}

#define TRACE_GICV3_REDIST_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_REDIST_WRITE) || \
    false)

static inline void _nocheck__trace_gicv3_redist_write(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_REDIST_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 167 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_redist_write " "GICv3 redistributor 0x%x write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, offset, data, size, secure);
#line 4826 "trace/trace-hw_intc.h"
        } else {
#line 167 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_redist_write " "GICv3 redistributor 0x%x write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n", cpu, offset, data, size, secure);
#line 4830 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_redist_write(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_redist_write(cpu, offset, data, size, secure);
    }
}

#define TRACE_GICV3_REDIST_BADWRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_REDIST_BADWRITE) || \
    false)

static inline void _nocheck__trace_gicv3_redist_badwrite(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_GICV3_REDIST_BADWRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 168 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_redist_badwrite " "GICv3 redistributor 0x%x write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d: error" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, offset, data, size, secure);
#line 4857 "trace/trace-hw_intc.h"
        } else {
#line 168 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_redist_badwrite " "GICv3 redistributor 0x%x write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d: error" "\n", cpu, offset, data, size, secure);
#line 4861 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_redist_badwrite(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_redist_badwrite(cpu, offset, data, size, secure);
    }
}

#define TRACE_GICV3_REDIST_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_REDIST_SET_IRQ) || \
    false)

static inline void _nocheck__trace_gicv3_redist_set_irq(uint32_t cpu, int irq, int level)
{
    if (trace_event_get_state(TRACE_GICV3_REDIST_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 169 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_redist_set_irq " "GICv3 redistributor 0x%x interrupt %d level changed to %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, irq, level);
#line 4888 "trace/trace-hw_intc.h"
        } else {
#line 169 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_redist_set_irq " "GICv3 redistributor 0x%x interrupt %d level changed to %d" "\n", cpu, irq, level);
#line 4892 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_redist_set_irq(uint32_t cpu, int irq, int level)
{
    if (true) {
        _nocheck__trace_gicv3_redist_set_irq(cpu, irq, level);
    }
}

#define TRACE_GICV3_REDIST_SEND_SGI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GICV3_REDIST_SEND_SGI) || \
    false)

static inline void _nocheck__trace_gicv3_redist_send_sgi(uint32_t cpu, int irq)
{
    if (trace_event_get_state(TRACE_GICV3_REDIST_SEND_SGI) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 170 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:gicv3_redist_send_sgi " "GICv3 redistributor 0x%x pending SGI %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu, irq);
#line 4919 "trace/trace-hw_intc.h"
        } else {
#line 170 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("gicv3_redist_send_sgi " "GICv3 redistributor 0x%x pending SGI %d" "\n", cpu, irq);
#line 4923 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_gicv3_redist_send_sgi(uint32_t cpu, int irq)
{
    if (true) {
        _nocheck__trace_gicv3_redist_send_sgi(cpu, irq);
    }
}

#define TRACE_NVIC_RECOMPUTE_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_RECOMPUTE_STATE) || \
    false)

static inline void _nocheck__trace_nvic_recompute_state(int vectpending, int vectpending_prio, int exception_prio)
{
    if (trace_event_get_state(TRACE_NVIC_RECOMPUTE_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 173 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:nvic_recompute_state " "NVIC state recomputed: vectpending %d vectpending_prio %d exception_prio %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , vectpending, vectpending_prio, exception_prio);
#line 4950 "trace/trace-hw_intc.h"
        } else {
#line 173 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("nvic_recompute_state " "NVIC state recomputed: vectpending %d vectpending_prio %d exception_prio %d" "\n", vectpending, vectpending_prio, exception_prio);
#line 4954 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_nvic_recompute_state(int vectpending, int vectpending_prio, int exception_prio)
{
    if (true) {
        _nocheck__trace_nvic_recompute_state(vectpending, vectpending_prio, exception_prio);
    }
}

#define TRACE_NVIC_RECOMPUTE_STATE_SECURE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_RECOMPUTE_STATE_SECURE) || \
    false)

static inline void _nocheck__trace_nvic_recompute_state_secure(int vectpending, bool vectpending_is_s_banked, int vectpending_prio, int exception_prio)
{
    if (trace_event_get_state(TRACE_NVIC_RECOMPUTE_STATE_SECURE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 174 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:nvic_recompute_state_secure " "NVIC state recomputed: vectpending %d is_s_banked %d vectpending_prio %d exception_prio %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , vectpending, vectpending_is_s_banked, vectpending_prio, exception_prio);
#line 4981 "trace/trace-hw_intc.h"
        } else {
#line 174 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("nvic_recompute_state_secure " "NVIC state recomputed: vectpending %d is_s_banked %d vectpending_prio %d exception_prio %d" "\n", vectpending, vectpending_is_s_banked, vectpending_prio, exception_prio);
#line 4985 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_nvic_recompute_state_secure(int vectpending, bool vectpending_is_s_banked, int vectpending_prio, int exception_prio)
{
    if (true) {
        _nocheck__trace_nvic_recompute_state_secure(vectpending, vectpending_is_s_banked, vectpending_prio, exception_prio);
    }
}

#define TRACE_NVIC_SET_PRIO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_SET_PRIO) || \
    false)

static inline void _nocheck__trace_nvic_set_prio(int irq, bool secure, uint8_t prio)
{
    if (trace_event_get_state(TRACE_NVIC_SET_PRIO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 175 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:nvic_set_prio " "NVIC set irq %d secure-bank %d priority %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, secure, prio);
#line 5012 "trace/trace-hw_intc.h"
        } else {
#line 175 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("nvic_set_prio " "NVIC set irq %d secure-bank %d priority %d" "\n", irq, secure, prio);
#line 5016 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_nvic_set_prio(int irq, bool secure, uint8_t prio)
{
    if (true) {
        _nocheck__trace_nvic_set_prio(irq, secure, prio);
    }
}

#define TRACE_NVIC_IRQ_UPDATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_IRQ_UPDATE) || \
    false)

static inline void _nocheck__trace_nvic_irq_update(int vectpending, int pendprio, int exception_prio, int level)
{
    if (trace_event_get_state(TRACE_NVIC_IRQ_UPDATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 176 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:nvic_irq_update " "NVIC vectpending %d pending prio %d exception_prio %d: setting irq line to %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , vectpending, pendprio, exception_prio, level);
#line 5043 "trace/trace-hw_intc.h"
        } else {
#line 176 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("nvic_irq_update " "NVIC vectpending %d pending prio %d exception_prio %d: setting irq line to %d" "\n", vectpending, pendprio, exception_prio, level);
#line 5047 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_nvic_irq_update(int vectpending, int pendprio, int exception_prio, int level)
{
    if (true) {
        _nocheck__trace_nvic_irq_update(vectpending, pendprio, exception_prio, level);
    }
}

#define TRACE_NVIC_ESCALATE_PRIO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_ESCALATE_PRIO) || \
    false)

static inline void _nocheck__trace_nvic_escalate_prio(int irq, int irqprio, int runprio)
{
    if (trace_event_get_state(TRACE_NVIC_ESCALATE_PRIO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 177 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:nvic_escalate_prio " "NVIC escalating irq %d to HardFault: insufficient priority %d >= %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, irqprio, runprio);
#line 5074 "trace/trace-hw_intc.h"
        } else {
#line 177 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("nvic_escalate_prio " "NVIC escalating irq %d to HardFault: insufficient priority %d >= %d" "\n", irq, irqprio, runprio);
#line 5078 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_nvic_escalate_prio(int irq, int irqprio, int runprio)
{
    if (true) {
        _nocheck__trace_nvic_escalate_prio(irq, irqprio, runprio);
    }
}

#define TRACE_NVIC_ESCALATE_DISABLED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_ESCALATE_DISABLED) || \
    false)

static inline void _nocheck__trace_nvic_escalate_disabled(int irq)
{
    if (trace_event_get_state(TRACE_NVIC_ESCALATE_DISABLED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 178 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:nvic_escalate_disabled " "NVIC escalating irq %d to HardFault: disabled" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq);
#line 5105 "trace/trace-hw_intc.h"
        } else {
#line 178 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("nvic_escalate_disabled " "NVIC escalating irq %d to HardFault: disabled" "\n", irq);
#line 5109 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_nvic_escalate_disabled(int irq)
{
    if (true) {
        _nocheck__trace_nvic_escalate_disabled(irq);
    }
}

#define TRACE_NVIC_SET_PENDING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_SET_PENDING) || \
    false)

static inline void _nocheck__trace_nvic_set_pending(int irq, bool secure, bool targets_secure, bool derived, int en, int prio)
{
    if (trace_event_get_state(TRACE_NVIC_SET_PENDING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 179 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:nvic_set_pending " "NVIC set pending irq %d secure-bank %d targets_secure %d derived %d (enabled: %d priority %d)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, secure, targets_secure, derived, en, prio);
#line 5136 "trace/trace-hw_intc.h"
        } else {
#line 179 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("nvic_set_pending " "NVIC set pending irq %d secure-bank %d targets_secure %d derived %d (enabled: %d priority %d)" "\n", irq, secure, targets_secure, derived, en, prio);
#line 5140 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_nvic_set_pending(int irq, bool secure, bool targets_secure, bool derived, int en, int prio)
{
    if (true) {
        _nocheck__trace_nvic_set_pending(irq, secure, targets_secure, derived, en, prio);
    }
}

#define TRACE_NVIC_CLEAR_PENDING_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_CLEAR_PENDING) || \
    false)

static inline void _nocheck__trace_nvic_clear_pending(int irq, bool secure, int en, int prio)
{
    if (trace_event_get_state(TRACE_NVIC_CLEAR_PENDING) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 180 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:nvic_clear_pending " "NVIC clear pending irq %d secure-bank %d (enabled: %d priority %d)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, secure, en, prio);
#line 5167 "trace/trace-hw_intc.h"
        } else {
#line 180 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("nvic_clear_pending " "NVIC clear pending irq %d secure-bank %d (enabled: %d priority %d)" "\n", irq, secure, en, prio);
#line 5171 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_nvic_clear_pending(int irq, bool secure, int en, int prio)
{
    if (true) {
        _nocheck__trace_nvic_clear_pending(irq, secure, en, prio);
    }
}

#define TRACE_NVIC_ACKNOWLEDGE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_ACKNOWLEDGE_IRQ) || \
    false)

static inline void _nocheck__trace_nvic_acknowledge_irq(int irq, int prio)
{
    if (trace_event_get_state(TRACE_NVIC_ACKNOWLEDGE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 181 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:nvic_acknowledge_irq " "NVIC acknowledge IRQ: %d now active (prio %d)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, prio);
#line 5198 "trace/trace-hw_intc.h"
        } else {
#line 181 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("nvic_acknowledge_irq " "NVIC acknowledge IRQ: %d now active (prio %d)" "\n", irq, prio);
#line 5202 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_nvic_acknowledge_irq(int irq, int prio)
{
    if (true) {
        _nocheck__trace_nvic_acknowledge_irq(irq, prio);
    }
}

#define TRACE_NVIC_GET_PENDING_IRQ_INFO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_GET_PENDING_IRQ_INFO) || \
    false)

static inline void _nocheck__trace_nvic_get_pending_irq_info(int irq, bool secure)
{
    if (trace_event_get_state(TRACE_NVIC_GET_PENDING_IRQ_INFO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 182 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:nvic_get_pending_irq_info " "NVIC next IRQ %d: targets_secure: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, secure);
#line 5229 "trace/trace-hw_intc.h"
        } else {
#line 182 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("nvic_get_pending_irq_info " "NVIC next IRQ %d: targets_secure: %d" "\n", irq, secure);
#line 5233 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_nvic_get_pending_irq_info(int irq, bool secure)
{
    if (true) {
        _nocheck__trace_nvic_get_pending_irq_info(irq, secure);
    }
}

#define TRACE_NVIC_COMPLETE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_COMPLETE_IRQ) || \
    false)

static inline void _nocheck__trace_nvic_complete_irq(int irq, bool secure)
{
    if (trace_event_get_state(TRACE_NVIC_COMPLETE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 183 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:nvic_complete_irq " "NVIC complete IRQ %d (secure %d)" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, secure);
#line 5260 "trace/trace-hw_intc.h"
        } else {
#line 183 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("nvic_complete_irq " "NVIC complete IRQ %d (secure %d)" "\n", irq, secure);
#line 5264 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_nvic_complete_irq(int irq, bool secure)
{
    if (true) {
        _nocheck__trace_nvic_complete_irq(irq, secure);
    }
}

#define TRACE_NVIC_SET_IRQ_LEVEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_SET_IRQ_LEVEL) || \
    false)

static inline void _nocheck__trace_nvic_set_irq_level(int irq, int level)
{
    if (trace_event_get_state(TRACE_NVIC_SET_IRQ_LEVEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 184 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:nvic_set_irq_level " "NVIC external irq %d level set to %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, level);
#line 5291 "trace/trace-hw_intc.h"
        } else {
#line 184 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("nvic_set_irq_level " "NVIC external irq %d level set to %d" "\n", irq, level);
#line 5295 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_nvic_set_irq_level(int irq, int level)
{
    if (true) {
        _nocheck__trace_nvic_set_irq_level(irq, level);
    }
}

#define TRACE_NVIC_SET_NMI_LEVEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_SET_NMI_LEVEL) || \
    false)

static inline void _nocheck__trace_nvic_set_nmi_level(int level)
{
    if (trace_event_get_state(TRACE_NVIC_SET_NMI_LEVEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 185 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:nvic_set_nmi_level " "NVIC external NMI level set to %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 5322 "trace/trace-hw_intc.h"
        } else {
#line 185 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("nvic_set_nmi_level " "NVIC external NMI level set to %d" "\n", level);
#line 5326 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_nvic_set_nmi_level(int level)
{
    if (true) {
        _nocheck__trace_nvic_set_nmi_level(level);
    }
}

#define TRACE_NVIC_SYSREG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_SYSREG_READ) || \
    false)

static inline void _nocheck__trace_nvic_sysreg_read(uint64_t addr, uint32_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_NVIC_SYSREG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 186 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:nvic_sysreg_read " "NVIC sysreg read addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value, size);
#line 5353 "trace/trace-hw_intc.h"
        } else {
#line 186 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("nvic_sysreg_read " "NVIC sysreg read addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n", addr, value, size);
#line 5357 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_nvic_sysreg_read(uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_nvic_sysreg_read(addr, value, size);
    }
}

#define TRACE_NVIC_SYSREG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NVIC_SYSREG_WRITE) || \
    false)

static inline void _nocheck__trace_nvic_sysreg_write(uint64_t addr, uint32_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_NVIC_SYSREG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 187 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:nvic_sysreg_write " "NVIC sysreg write addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value, size);
#line 5384 "trace/trace-hw_intc.h"
        } else {
#line 187 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("nvic_sysreg_write " "NVIC sysreg write addr 0x%" PRIx64 " data 0x%" PRIx32 " size %u" "\n", addr, value, size);
#line 5388 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_nvic_sysreg_write(uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_nvic_sysreg_write(addr, value, size);
    }
}

#define TRACE_HEATHROW_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_HEATHROW_WRITE) || \
    false)

static inline void _nocheck__trace_heathrow_write(uint64_t addr, unsigned int n, uint64_t value)
{
    if (trace_event_get_state(TRACE_HEATHROW_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 190 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:heathrow_write " "0x%"PRIx64" %u: 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, n, value);
#line 5415 "trace/trace-hw_intc.h"
        } else {
#line 190 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("heathrow_write " "0x%"PRIx64" %u: 0x%"PRIx64 "\n", addr, n, value);
#line 5419 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_heathrow_write(uint64_t addr, unsigned int n, uint64_t value)
{
    if (true) {
        _nocheck__trace_heathrow_write(addr, n, value);
    }
}

#define TRACE_HEATHROW_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_HEATHROW_READ) || \
    false)

static inline void _nocheck__trace_heathrow_read(uint64_t addr, unsigned int n, uint64_t value)
{
    if (trace_event_get_state(TRACE_HEATHROW_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 191 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:heathrow_read " "0x%"PRIx64" %u: 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, n, value);
#line 5446 "trace/trace-hw_intc.h"
        } else {
#line 191 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("heathrow_read " "0x%"PRIx64" %u: 0x%"PRIx64 "\n", addr, n, value);
#line 5450 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_heathrow_read(uint64_t addr, unsigned int n, uint64_t value)
{
    if (true) {
        _nocheck__trace_heathrow_read(addr, n, value);
    }
}

#define TRACE_HEATHROW_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_HEATHROW_SET_IRQ) || \
    false)

static inline void _nocheck__trace_heathrow_set_irq(int num, int level)
{
    if (trace_event_get_state(TRACE_HEATHROW_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 192 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:heathrow_set_irq " "set_irq: num=0x%02x level=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , num, level);
#line 5477 "trace/trace-hw_intc.h"
        } else {
#line 192 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("heathrow_set_irq " "set_irq: num=0x%02x level=%d" "\n", num, level);
#line 5481 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_heathrow_set_irq(int num, int level)
{
    if (true) {
        _nocheck__trace_heathrow_set_irq(num, level);
    }
}

#define TRACE_BCM2835_IC_SET_GPU_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_IC_SET_GPU_IRQ) || \
    false)

static inline void _nocheck__trace_bcm2835_ic_set_gpu_irq(int irq, int level)
{
    if (trace_event_get_state(TRACE_BCM2835_IC_SET_GPU_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 195 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_ic_set_gpu_irq " "GPU irq #%d level %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, level);
#line 5508 "trace/trace-hw_intc.h"
        } else {
#line 195 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("bcm2835_ic_set_gpu_irq " "GPU irq #%d level %d" "\n", irq, level);
#line 5512 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_bcm2835_ic_set_gpu_irq(int irq, int level)
{
    if (true) {
        _nocheck__trace_bcm2835_ic_set_gpu_irq(irq, level);
    }
}

#define TRACE_BCM2835_IC_SET_CPU_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_IC_SET_CPU_IRQ) || \
    false)

static inline void _nocheck__trace_bcm2835_ic_set_cpu_irq(int irq, int level)
{
    if (trace_event_get_state(TRACE_BCM2835_IC_SET_CPU_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 196 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_ic_set_cpu_irq " "CPU irq #%d level %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, level);
#line 5539 "trace/trace-hw_intc.h"
        } else {
#line 196 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("bcm2835_ic_set_cpu_irq " "CPU irq #%d level %d" "\n", irq, level);
#line 5543 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_bcm2835_ic_set_cpu_irq(int irq, int level)
{
    if (true) {
        _nocheck__trace_bcm2835_ic_set_cpu_irq(irq, level);
    }
}

#define TRACE_SPAPR_XIVE_CLAIM_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPAPR_XIVE_CLAIM_IRQ) || \
    false)

static inline void _nocheck__trace_spapr_xive_claim_irq(uint32_t lisn, bool lsi)
{
    if (trace_event_get_state(TRACE_SPAPR_XIVE_CLAIM_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 199 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:spapr_xive_claim_irq " "lisn=0x%x lsi=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , lisn, lsi);
#line 5570 "trace/trace-hw_intc.h"
        } else {
#line 199 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("spapr_xive_claim_irq " "lisn=0x%x lsi=%d" "\n", lisn, lsi);
#line 5574 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_spapr_xive_claim_irq(uint32_t lisn, bool lsi)
{
    if (true) {
        _nocheck__trace_spapr_xive_claim_irq(lisn, lsi);
    }
}

#define TRACE_SPAPR_XIVE_FREE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPAPR_XIVE_FREE_IRQ) || \
    false)

static inline void _nocheck__trace_spapr_xive_free_irq(uint32_t lisn)
{
    if (trace_event_get_state(TRACE_SPAPR_XIVE_FREE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 200 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:spapr_xive_free_irq " "lisn=0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , lisn);
#line 5601 "trace/trace-hw_intc.h"
        } else {
#line 200 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("spapr_xive_free_irq " "lisn=0x%x" "\n", lisn);
#line 5605 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_spapr_xive_free_irq(uint32_t lisn)
{
    if (true) {
        _nocheck__trace_spapr_xive_free_irq(lisn);
    }
}

#define TRACE_SPAPR_XIVE_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPAPR_XIVE_SET_IRQ) || \
    false)

static inline void _nocheck__trace_spapr_xive_set_irq(uint32_t lisn, uint32_t val)
{
    if (trace_event_get_state(TRACE_SPAPR_XIVE_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 201 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:spapr_xive_set_irq " "lisn=0x%x val=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , lisn, val);
#line 5632 "trace/trace-hw_intc.h"
        } else {
#line 201 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("spapr_xive_set_irq " "lisn=0x%x val=%d" "\n", lisn, val);
#line 5636 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_spapr_xive_set_irq(uint32_t lisn, uint32_t val)
{
    if (true) {
        _nocheck__trace_spapr_xive_set_irq(lisn, val);
    }
}

#define TRACE_SPAPR_XIVE_GET_SOURCE_INFO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPAPR_XIVE_GET_SOURCE_INFO) || \
    false)

static inline void _nocheck__trace_spapr_xive_get_source_info(uint64_t flags, uint64_t lisn)
{
    if (trace_event_get_state(TRACE_SPAPR_XIVE_GET_SOURCE_INFO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 202 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:spapr_xive_get_source_info " "flags=0x%"PRIx64" lisn=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags, lisn);
#line 5663 "trace/trace-hw_intc.h"
        } else {
#line 202 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("spapr_xive_get_source_info " "flags=0x%"PRIx64" lisn=0x%"PRIx64 "\n", flags, lisn);
#line 5667 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_spapr_xive_get_source_info(uint64_t flags, uint64_t lisn)
{
    if (true) {
        _nocheck__trace_spapr_xive_get_source_info(flags, lisn);
    }
}

#define TRACE_SPAPR_XIVE_SET_SOURCE_CONFIG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPAPR_XIVE_SET_SOURCE_CONFIG) || \
    false)

static inline void _nocheck__trace_spapr_xive_set_source_config(uint64_t flags, uint64_t lisn, uint64_t target, uint64_t priority, uint64_t eisn)
{
    if (trace_event_get_state(TRACE_SPAPR_XIVE_SET_SOURCE_CONFIG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 203 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:spapr_xive_set_source_config " "flags=0x%"PRIx64" lisn=0x%"PRIx64" target=0x%"PRIx64" priority=0x%"PRIx64" eisn=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags, lisn, target, priority, eisn);
#line 5694 "trace/trace-hw_intc.h"
        } else {
#line 203 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("spapr_xive_set_source_config " "flags=0x%"PRIx64" lisn=0x%"PRIx64" target=0x%"PRIx64" priority=0x%"PRIx64" eisn=0x%"PRIx64 "\n", flags, lisn, target, priority, eisn);
#line 5698 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_spapr_xive_set_source_config(uint64_t flags, uint64_t lisn, uint64_t target, uint64_t priority, uint64_t eisn)
{
    if (true) {
        _nocheck__trace_spapr_xive_set_source_config(flags, lisn, target, priority, eisn);
    }
}

#define TRACE_SPAPR_XIVE_GET_SOURCE_CONFIG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPAPR_XIVE_GET_SOURCE_CONFIG) || \
    false)

static inline void _nocheck__trace_spapr_xive_get_source_config(uint64_t flags, uint64_t lisn)
{
    if (trace_event_get_state(TRACE_SPAPR_XIVE_GET_SOURCE_CONFIG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 204 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:spapr_xive_get_source_config " "flags=0x%"PRIx64" lisn=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags, lisn);
#line 5725 "trace/trace-hw_intc.h"
        } else {
#line 204 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("spapr_xive_get_source_config " "flags=0x%"PRIx64" lisn=0x%"PRIx64 "\n", flags, lisn);
#line 5729 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_spapr_xive_get_source_config(uint64_t flags, uint64_t lisn)
{
    if (true) {
        _nocheck__trace_spapr_xive_get_source_config(flags, lisn);
    }
}

#define TRACE_SPAPR_XIVE_GET_QUEUE_INFO_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPAPR_XIVE_GET_QUEUE_INFO) || \
    false)

static inline void _nocheck__trace_spapr_xive_get_queue_info(uint64_t flags, uint64_t target, uint64_t priority)
{
    if (trace_event_get_state(TRACE_SPAPR_XIVE_GET_QUEUE_INFO) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 205 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:spapr_xive_get_queue_info " "flags=0x%"PRIx64" target=0x%"PRIx64" priority=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags, target, priority);
#line 5756 "trace/trace-hw_intc.h"
        } else {
#line 205 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("spapr_xive_get_queue_info " "flags=0x%"PRIx64" target=0x%"PRIx64" priority=0x%"PRIx64 "\n", flags, target, priority);
#line 5760 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_spapr_xive_get_queue_info(uint64_t flags, uint64_t target, uint64_t priority)
{
    if (true) {
        _nocheck__trace_spapr_xive_get_queue_info(flags, target, priority);
    }
}

#define TRACE_SPAPR_XIVE_SET_QUEUE_CONFIG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPAPR_XIVE_SET_QUEUE_CONFIG) || \
    false)

static inline void _nocheck__trace_spapr_xive_set_queue_config(uint64_t flags, uint64_t target, uint64_t priority, uint64_t qpage, uint64_t qsize)
{
    if (trace_event_get_state(TRACE_SPAPR_XIVE_SET_QUEUE_CONFIG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 206 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:spapr_xive_set_queue_config " "flags=0x%"PRIx64" target=0x%"PRIx64" priority=0x%"PRIx64" qpage=0x%"PRIx64" qsize=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags, target, priority, qpage, qsize);
#line 5787 "trace/trace-hw_intc.h"
        } else {
#line 206 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("spapr_xive_set_queue_config " "flags=0x%"PRIx64" target=0x%"PRIx64" priority=0x%"PRIx64" qpage=0x%"PRIx64" qsize=0x%"PRIx64 "\n", flags, target, priority, qpage, qsize);
#line 5791 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_spapr_xive_set_queue_config(uint64_t flags, uint64_t target, uint64_t priority, uint64_t qpage, uint64_t qsize)
{
    if (true) {
        _nocheck__trace_spapr_xive_set_queue_config(flags, target, priority, qpage, qsize);
    }
}

#define TRACE_SPAPR_XIVE_GET_QUEUE_CONFIG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPAPR_XIVE_GET_QUEUE_CONFIG) || \
    false)

static inline void _nocheck__trace_spapr_xive_get_queue_config(uint64_t flags, uint64_t target, uint64_t priority)
{
    if (trace_event_get_state(TRACE_SPAPR_XIVE_GET_QUEUE_CONFIG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 207 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:spapr_xive_get_queue_config " "flags=0x%"PRIx64" target=0x%"PRIx64" priority=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags, target, priority);
#line 5818 "trace/trace-hw_intc.h"
        } else {
#line 207 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("spapr_xive_get_queue_config " "flags=0x%"PRIx64" target=0x%"PRIx64" priority=0x%"PRIx64 "\n", flags, target, priority);
#line 5822 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_spapr_xive_get_queue_config(uint64_t flags, uint64_t target, uint64_t priority)
{
    if (true) {
        _nocheck__trace_spapr_xive_get_queue_config(flags, target, priority);
    }
}

#define TRACE_SPAPR_XIVE_SET_OS_REPORTING_LINE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPAPR_XIVE_SET_OS_REPORTING_LINE) || \
    false)

static inline void _nocheck__trace_spapr_xive_set_os_reporting_line(uint64_t flags)
{
    if (trace_event_get_state(TRACE_SPAPR_XIVE_SET_OS_REPORTING_LINE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 208 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:spapr_xive_set_os_reporting_line " "flags=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags);
#line 5849 "trace/trace-hw_intc.h"
        } else {
#line 208 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("spapr_xive_set_os_reporting_line " "flags=0x%"PRIx64 "\n", flags);
#line 5853 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_spapr_xive_set_os_reporting_line(uint64_t flags)
{
    if (true) {
        _nocheck__trace_spapr_xive_set_os_reporting_line(flags);
    }
}

#define TRACE_SPAPR_XIVE_GET_OS_REPORTING_LINE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPAPR_XIVE_GET_OS_REPORTING_LINE) || \
    false)

static inline void _nocheck__trace_spapr_xive_get_os_reporting_line(uint64_t flags)
{
    if (trace_event_get_state(TRACE_SPAPR_XIVE_GET_OS_REPORTING_LINE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 209 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:spapr_xive_get_os_reporting_line " "flags=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags);
#line 5880 "trace/trace-hw_intc.h"
        } else {
#line 209 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("spapr_xive_get_os_reporting_line " "flags=0x%"PRIx64 "\n", flags);
#line 5884 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_spapr_xive_get_os_reporting_line(uint64_t flags)
{
    if (true) {
        _nocheck__trace_spapr_xive_get_os_reporting_line(flags);
    }
}

#define TRACE_SPAPR_XIVE_ESB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPAPR_XIVE_ESB) || \
    false)

static inline void _nocheck__trace_spapr_xive_esb(uint64_t flags, uint64_t lisn, uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_SPAPR_XIVE_ESB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 210 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:spapr_xive_esb " "flags=0x%"PRIx64" lisn=0x%"PRIx64" offset=0x%"PRIx64" data=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags, lisn, offset, data);
#line 5911 "trace/trace-hw_intc.h"
        } else {
#line 210 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("spapr_xive_esb " "flags=0x%"PRIx64" lisn=0x%"PRIx64" offset=0x%"PRIx64" data=0x%"PRIx64 "\n", flags, lisn, offset, data);
#line 5915 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_spapr_xive_esb(uint64_t flags, uint64_t lisn, uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_spapr_xive_esb(flags, lisn, offset, data);
    }
}

#define TRACE_SPAPR_XIVE_SYNC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPAPR_XIVE_SYNC) || \
    false)

static inline void _nocheck__trace_spapr_xive_sync(uint64_t flags, uint64_t lisn)
{
    if (trace_event_get_state(TRACE_SPAPR_XIVE_SYNC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 211 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:spapr_xive_sync " "flags=0x%"PRIx64" lisn=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags, lisn);
#line 5942 "trace/trace-hw_intc.h"
        } else {
#line 211 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("spapr_xive_sync " "flags=0x%"PRIx64" lisn=0x%"PRIx64 "\n", flags, lisn);
#line 5946 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_spapr_xive_sync(uint64_t flags, uint64_t lisn)
{
    if (true) {
        _nocheck__trace_spapr_xive_sync(flags, lisn);
    }
}

#define TRACE_SPAPR_XIVE_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SPAPR_XIVE_RESET) || \
    false)

static inline void _nocheck__trace_spapr_xive_reset(uint64_t flags)
{
    if (trace_event_get_state(TRACE_SPAPR_XIVE_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 212 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:spapr_xive_reset " "flags=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , flags);
#line 5973 "trace/trace-hw_intc.h"
        } else {
#line 212 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("spapr_xive_reset " "flags=0x%"PRIx64 "\n", flags);
#line 5977 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_spapr_xive_reset(uint64_t flags)
{
    if (true) {
        _nocheck__trace_spapr_xive_reset(flags);
    }
}

#define TRACE_KVM_XIVE_CPU_CONNECT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KVM_XIVE_CPU_CONNECT) || \
    false)

static inline void _nocheck__trace_kvm_xive_cpu_connect(uint32_t id)
{
    if (trace_event_get_state(TRACE_KVM_XIVE_CPU_CONNECT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 215 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:kvm_xive_cpu_connect " "connect CPU%d to KVM device" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 6004 "trace/trace-hw_intc.h"
        } else {
#line 215 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("kvm_xive_cpu_connect " "connect CPU%d to KVM device" "\n", id);
#line 6008 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_kvm_xive_cpu_connect(uint32_t id)
{
    if (true) {
        _nocheck__trace_kvm_xive_cpu_connect(id);
    }
}

#define TRACE_KVM_XIVE_SOURCE_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_KVM_XIVE_SOURCE_RESET) || \
    false)

static inline void _nocheck__trace_kvm_xive_source_reset(uint32_t srcno)
{
    if (trace_event_get_state(TRACE_KVM_XIVE_SOURCE_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 216 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:kvm_xive_source_reset " "IRQ 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , srcno);
#line 6035 "trace/trace-hw_intc.h"
        } else {
#line 216 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("kvm_xive_source_reset " "IRQ 0x%x" "\n", srcno);
#line 6039 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_kvm_xive_source_reset(uint32_t srcno)
{
    if (true) {
        _nocheck__trace_kvm_xive_source_reset(srcno);
    }
}

#define TRACE_XIVE_TCTX_ACCEPT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XIVE_TCTX_ACCEPT) || \
    false)

static inline void _nocheck__trace_xive_tctx_accept(uint32_t index, uint8_t ring, uint8_t ipb, uint8_t pipr, uint8_t cppr, uint8_t nsr)
{
    if (trace_event_get_state(TRACE_XIVE_TCTX_ACCEPT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 219 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xive_tctx_accept " "target=%d ring=0x%x IBP=0x%02x PIPR=0x%02x CPPR=0x%02x NSR=0x%02x ACK" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , index, ring, ipb, pipr, cppr, nsr);
#line 6066 "trace/trace-hw_intc.h"
        } else {
#line 219 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xive_tctx_accept " "target=%d ring=0x%x IBP=0x%02x PIPR=0x%02x CPPR=0x%02x NSR=0x%02x ACK" "\n", index, ring, ipb, pipr, cppr, nsr);
#line 6070 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xive_tctx_accept(uint32_t index, uint8_t ring, uint8_t ipb, uint8_t pipr, uint8_t cppr, uint8_t nsr)
{
    if (true) {
        _nocheck__trace_xive_tctx_accept(index, ring, ipb, pipr, cppr, nsr);
    }
}

#define TRACE_XIVE_TCTX_NOTIFY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XIVE_TCTX_NOTIFY) || \
    false)

static inline void _nocheck__trace_xive_tctx_notify(uint32_t index, uint8_t ring, uint8_t ipb, uint8_t pipr, uint8_t cppr, uint8_t nsr)
{
    if (trace_event_get_state(TRACE_XIVE_TCTX_NOTIFY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 220 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xive_tctx_notify " "target=%d ring=0x%x IBP=0x%02x PIPR=0x%02x CPPR=0x%02x NSR=0x%02x raise !" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , index, ring, ipb, pipr, cppr, nsr);
#line 6097 "trace/trace-hw_intc.h"
        } else {
#line 220 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xive_tctx_notify " "target=%d ring=0x%x IBP=0x%02x PIPR=0x%02x CPPR=0x%02x NSR=0x%02x raise !" "\n", index, ring, ipb, pipr, cppr, nsr);
#line 6101 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xive_tctx_notify(uint32_t index, uint8_t ring, uint8_t ipb, uint8_t pipr, uint8_t cppr, uint8_t nsr)
{
    if (true) {
        _nocheck__trace_xive_tctx_notify(index, ring, ipb, pipr, cppr, nsr);
    }
}

#define TRACE_XIVE_TCTX_SET_CPPR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XIVE_TCTX_SET_CPPR) || \
    false)

static inline void _nocheck__trace_xive_tctx_set_cppr(uint32_t index, uint8_t ring, uint8_t ipb, uint8_t pipr, uint8_t cppr, uint8_t nsr)
{
    if (trace_event_get_state(TRACE_XIVE_TCTX_SET_CPPR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 221 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xive_tctx_set_cppr " "target=%d ring=0x%x IBP=0x%02x PIPR=0x%02x new CPPR=0x%02x NSR=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , index, ring, ipb, pipr, cppr, nsr);
#line 6128 "trace/trace-hw_intc.h"
        } else {
#line 221 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xive_tctx_set_cppr " "target=%d ring=0x%x IBP=0x%02x PIPR=0x%02x new CPPR=0x%02x NSR=0x%02x" "\n", index, ring, ipb, pipr, cppr, nsr);
#line 6132 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xive_tctx_set_cppr(uint32_t index, uint8_t ring, uint8_t ipb, uint8_t pipr, uint8_t cppr, uint8_t nsr)
{
    if (true) {
        _nocheck__trace_xive_tctx_set_cppr(index, ring, ipb, pipr, cppr, nsr);
    }
}

#define TRACE_XIVE_SOURCE_ESB_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XIVE_SOURCE_ESB_READ) || \
    false)

static inline void _nocheck__trace_xive_source_esb_read(uint64_t addr, uint32_t srcno, uint64_t value)
{
    if (trace_event_get_state(TRACE_XIVE_SOURCE_ESB_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 222 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xive_source_esb_read " "@0x0x%"PRIx64" IRQ 0x%x val=0x0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, srcno, value);
#line 6159 "trace/trace-hw_intc.h"
        } else {
#line 222 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xive_source_esb_read " "@0x0x%"PRIx64" IRQ 0x%x val=0x0x%"PRIx64 "\n", addr, srcno, value);
#line 6163 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xive_source_esb_read(uint64_t addr, uint32_t srcno, uint64_t value)
{
    if (true) {
        _nocheck__trace_xive_source_esb_read(addr, srcno, value);
    }
}

#define TRACE_XIVE_SOURCE_ESB_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XIVE_SOURCE_ESB_WRITE) || \
    false)

static inline void _nocheck__trace_xive_source_esb_write(uint64_t addr, uint32_t srcno, uint64_t value)
{
    if (trace_event_get_state(TRACE_XIVE_SOURCE_ESB_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 223 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xive_source_esb_write " "@0x0x%"PRIx64" IRQ 0x%x val=0x0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, srcno, value);
#line 6190 "trace/trace-hw_intc.h"
        } else {
#line 223 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xive_source_esb_write " "@0x0x%"PRIx64" IRQ 0x%x val=0x0x%"PRIx64 "\n", addr, srcno, value);
#line 6194 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xive_source_esb_write(uint64_t addr, uint32_t srcno, uint64_t value)
{
    if (true) {
        _nocheck__trace_xive_source_esb_write(addr, srcno, value);
    }
}

#define TRACE_XIVE_ROUTER_END_NOTIFY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XIVE_ROUTER_END_NOTIFY) || \
    false)

static inline void _nocheck__trace_xive_router_end_notify(uint8_t end_blk, uint32_t end_idx, uint32_t end_data)
{
    if (trace_event_get_state(TRACE_XIVE_ROUTER_END_NOTIFY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 224 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xive_router_end_notify " "END 0x%02x/0x%04x -> enqueue 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , end_blk, end_idx, end_data);
#line 6221 "trace/trace-hw_intc.h"
        } else {
#line 224 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xive_router_end_notify " "END 0x%02x/0x%04x -> enqueue 0x%08x" "\n", end_blk, end_idx, end_data);
#line 6225 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xive_router_end_notify(uint8_t end_blk, uint32_t end_idx, uint32_t end_data)
{
    if (true) {
        _nocheck__trace_xive_router_end_notify(end_blk, end_idx, end_data);
    }
}

#define TRACE_XIVE_ROUTER_END_ESCALATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XIVE_ROUTER_END_ESCALATE) || \
    false)

static inline void _nocheck__trace_xive_router_end_escalate(uint8_t end_blk, uint32_t end_idx, uint8_t esc_blk, uint32_t esc_idx, uint32_t end_data)
{
    if (trace_event_get_state(TRACE_XIVE_ROUTER_END_ESCALATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 225 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xive_router_end_escalate " "END 0x%02x/0x%04x -> escalate END 0x%02x/0x%04x data 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , end_blk, end_idx, esc_blk, esc_idx, end_data);
#line 6252 "trace/trace-hw_intc.h"
        } else {
#line 225 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xive_router_end_escalate " "END 0x%02x/0x%04x -> escalate END 0x%02x/0x%04x data 0x%08x" "\n", end_blk, end_idx, esc_blk, esc_idx, end_data);
#line 6256 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xive_router_end_escalate(uint8_t end_blk, uint32_t end_idx, uint8_t esc_blk, uint32_t esc_idx, uint32_t end_data)
{
    if (true) {
        _nocheck__trace_xive_router_end_escalate(end_blk, end_idx, esc_blk, esc_idx, end_data);
    }
}

#define TRACE_XIVE_TCTX_TM_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XIVE_TCTX_TM_WRITE) || \
    false)

static inline void _nocheck__trace_xive_tctx_tm_write(uint64_t offset, unsigned int size, uint64_t value)
{
    if (trace_event_get_state(TRACE_XIVE_TCTX_TM_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 226 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xive_tctx_tm_write " "@0x0x%"PRIx64" sz=%d val=0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, size, value);
#line 6283 "trace/trace-hw_intc.h"
        } else {
#line 226 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xive_tctx_tm_write " "@0x0x%"PRIx64" sz=%d val=0x%" PRIx64 "\n", offset, size, value);
#line 6287 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xive_tctx_tm_write(uint64_t offset, unsigned int size, uint64_t value)
{
    if (true) {
        _nocheck__trace_xive_tctx_tm_write(offset, size, value);
    }
}

#define TRACE_XIVE_TCTX_TM_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XIVE_TCTX_TM_READ) || \
    false)

static inline void _nocheck__trace_xive_tctx_tm_read(uint64_t offset, unsigned int size, uint64_t value)
{
    if (trace_event_get_state(TRACE_XIVE_TCTX_TM_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 227 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xive_tctx_tm_read " "@0x0x%"PRIx64" sz=%d val=0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, size, value);
#line 6314 "trace/trace-hw_intc.h"
        } else {
#line 227 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xive_tctx_tm_read " "@0x0x%"PRIx64" sz=%d val=0x%" PRIx64 "\n", offset, size, value);
#line 6318 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xive_tctx_tm_read(uint64_t offset, unsigned int size, uint64_t value)
{
    if (true) {
        _nocheck__trace_xive_tctx_tm_read(offset, size, value);
    }
}

#define TRACE_XIVE_PRESENTER_NOTIFY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XIVE_PRESENTER_NOTIFY) || \
    false)

static inline void _nocheck__trace_xive_presenter_notify(uint8_t nvt_blk, uint32_t nvt_idx, uint8_t ring)
{
    if (trace_event_get_state(TRACE_XIVE_PRESENTER_NOTIFY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 228 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xive_presenter_notify " "found NVT 0x%x/0x%x ring=0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , nvt_blk, nvt_idx, ring);
#line 6345 "trace/trace-hw_intc.h"
        } else {
#line 228 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xive_presenter_notify " "found NVT 0x%x/0x%x ring=0x%x" "\n", nvt_blk, nvt_idx, ring);
#line 6349 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xive_presenter_notify(uint8_t nvt_blk, uint32_t nvt_idx, uint8_t ring)
{
    if (true) {
        _nocheck__trace_xive_presenter_notify(nvt_blk, nvt_idx, ring);
    }
}

#define TRACE_XIVE_END_SOURCE_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XIVE_END_SOURCE_READ) || \
    false)

static inline void _nocheck__trace_xive_end_source_read(uint8_t end_blk, uint32_t end_idx, uint64_t addr)
{
    if (trace_event_get_state(TRACE_XIVE_END_SOURCE_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 229 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:xive_end_source_read " "END 0x%x/0x%x @0x0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , end_blk, end_idx, addr);
#line 6376 "trace/trace-hw_intc.h"
        } else {
#line 229 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("xive_end_source_read " "END 0x%x/0x%x @0x0x%"PRIx64 "\n", end_blk, end_idx, addr);
#line 6380 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_xive_end_source_read(uint8_t end_blk, uint32_t end_idx, uint64_t addr)
{
    if (true) {
        _nocheck__trace_xive_end_source_read(end_blk, end_idx, addr);
    }
}

#define TRACE_PNV_XIVE_IC_HW_TRIGGER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PNV_XIVE_IC_HW_TRIGGER) || \
    false)

static inline void _nocheck__trace_pnv_xive_ic_hw_trigger(uint64_t addr, uint64_t val)
{
    if (trace_event_get_state(TRACE_PNV_XIVE_IC_HW_TRIGGER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 232 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:pnv_xive_ic_hw_trigger " "@0x%"PRIx64" val=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 6407 "trace/trace-hw_intc.h"
        } else {
#line 232 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("pnv_xive_ic_hw_trigger " "@0x%"PRIx64" val=0x%"PRIx64 "\n", addr, val);
#line 6411 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_pnv_xive_ic_hw_trigger(uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_pnv_xive_ic_hw_trigger(addr, val);
    }
}

#define TRACE_GOLDFISH_IRQ_REQUEST_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GOLDFISH_IRQ_REQUEST) || \
    false)

static inline void _nocheck__trace_goldfish_irq_request(void * dev, int idx, int irq, int level)
{
    if (trace_event_get_state(TRACE_GOLDFISH_IRQ_REQUEST) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 235 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:goldfish_irq_request " "pic: %p goldfish-irq.%d irq: %d level: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev, idx, irq, level);
#line 6438 "trace/trace-hw_intc.h"
        } else {
#line 235 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("goldfish_irq_request " "pic: %p goldfish-irq.%d irq: %d level: %d" "\n", dev, idx, irq, level);
#line 6442 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_goldfish_irq_request(void * dev, int idx, int irq, int level)
{
    if (true) {
        _nocheck__trace_goldfish_irq_request(dev, idx, irq, level);
    }
}

#define TRACE_GOLDFISH_PIC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GOLDFISH_PIC_READ) || \
    false)

static inline void _nocheck__trace_goldfish_pic_read(void * dev, int idx, unsigned int addr, unsigned int size, uint64_t value)
{
    if (trace_event_get_state(TRACE_GOLDFISH_PIC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 236 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:goldfish_pic_read " "pic: %p goldfish-irq.%d reg: 0x%02x size: %d value: 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev, idx, addr, size, value);
#line 6469 "trace/trace-hw_intc.h"
        } else {
#line 236 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("goldfish_pic_read " "pic: %p goldfish-irq.%d reg: 0x%02x size: %d value: 0x%"PRIx64 "\n", dev, idx, addr, size, value);
#line 6473 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_goldfish_pic_read(void * dev, int idx, unsigned int addr, unsigned int size, uint64_t value)
{
    if (true) {
        _nocheck__trace_goldfish_pic_read(dev, idx, addr, size, value);
    }
}

#define TRACE_GOLDFISH_PIC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GOLDFISH_PIC_WRITE) || \
    false)

static inline void _nocheck__trace_goldfish_pic_write(void * dev, int idx, unsigned int addr, unsigned int size, uint64_t value)
{
    if (trace_event_get_state(TRACE_GOLDFISH_PIC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 237 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:goldfish_pic_write " "pic: %p goldfish-irq.%d reg: 0x%02x size: %d value: 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev, idx, addr, size, value);
#line 6500 "trace/trace-hw_intc.h"
        } else {
#line 237 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("goldfish_pic_write " "pic: %p goldfish-irq.%d reg: 0x%02x size: %d value: 0x%"PRIx64 "\n", dev, idx, addr, size, value);
#line 6504 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_goldfish_pic_write(void * dev, int idx, unsigned int addr, unsigned int size, uint64_t value)
{
    if (true) {
        _nocheck__trace_goldfish_pic_write(dev, idx, addr, size, value);
    }
}

#define TRACE_GOLDFISH_PIC_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GOLDFISH_PIC_RESET) || \
    false)

static inline void _nocheck__trace_goldfish_pic_reset(void * dev, int idx)
{
    if (trace_event_get_state(TRACE_GOLDFISH_PIC_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 238 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:goldfish_pic_reset " "pic: %p goldfish-irq.%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev, idx);
#line 6531 "trace/trace-hw_intc.h"
        } else {
#line 238 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("goldfish_pic_reset " "pic: %p goldfish-irq.%d" "\n", dev, idx);
#line 6535 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_goldfish_pic_reset(void * dev, int idx)
{
    if (true) {
        _nocheck__trace_goldfish_pic_reset(dev, idx);
    }
}

#define TRACE_GOLDFISH_PIC_REALIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GOLDFISH_PIC_REALIZE) || \
    false)

static inline void _nocheck__trace_goldfish_pic_realize(void * dev, int idx)
{
    if (trace_event_get_state(TRACE_GOLDFISH_PIC_REALIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 239 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:goldfish_pic_realize " "pic: %p goldfish-irq.%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev, idx);
#line 6562 "trace/trace-hw_intc.h"
        } else {
#line 239 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("goldfish_pic_realize " "pic: %p goldfish-irq.%d" "\n", dev, idx);
#line 6566 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_goldfish_pic_realize(void * dev, int idx)
{
    if (true) {
        _nocheck__trace_goldfish_pic_realize(dev, idx);
    }
}

#define TRACE_GOLDFISH_PIC_INSTANCE_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GOLDFISH_PIC_INSTANCE_INIT) || \
    false)

static inline void _nocheck__trace_goldfish_pic_instance_init(void * dev)
{
    if (trace_event_get_state(TRACE_GOLDFISH_PIC_INSTANCE_INIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 240 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("%d@%zu.%06zu:goldfish_pic_instance_init " "pic: %p goldfish-irq" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev);
#line 6593 "trace/trace-hw_intc.h"
        } else {
#line 240 "/Users/alastair/Desktop/Code/ferment/pkgmanager/Installed/qemu/hw/intc/trace-events"
            qemu_log("goldfish_pic_instance_init " "pic: %p goldfish-irq" "\n", dev);
#line 6597 "trace/trace-hw_intc.h"
        }
    }
}

static inline void trace_goldfish_pic_instance_init(void * dev)
{
    if (true) {
        _nocheck__trace_goldfish_pic_instance_init(dev);
    }
}
#endif /* TRACE_HW_INTC_GENERATED_TRACERS_H */
