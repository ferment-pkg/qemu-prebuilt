/* This file is autogenerated by scripts/decodetree.py.  */

typedef struct {
    int rt;
    int ra;
    int64_t si;
    bool r;
} arg_PLS_D;

typedef struct {
} arg_decode_insn641;

typedef arg_PLS_D arg_PLBZ;
static bool trans_PLBZ(DisasContext *ctx, arg_PLBZ *a);
typedef arg_PLS_D arg_PLHZ;
static bool trans_PLHZ(DisasContext *ctx, arg_PLHZ *a);
typedef arg_PLS_D arg_PLHA;
static bool trans_PLHA(DisasContext *ctx, arg_PLHA *a);
typedef arg_PLS_D arg_PLWZ;
static bool trans_PLWZ(DisasContext *ctx, arg_PLWZ *a);
typedef arg_PLS_D arg_PLWA;
static bool trans_PLWA(DisasContext *ctx, arg_PLWA *a);
typedef arg_PLS_D arg_PLD;
static bool trans_PLD(DisasContext *ctx, arg_PLD *a);
typedef arg_PLS_D arg_PSTW;
static bool trans_PSTW(DisasContext *ctx, arg_PSTW *a);
typedef arg_PLS_D arg_PSTB;
static bool trans_PSTB(DisasContext *ctx, arg_PSTB *a);
typedef arg_PLS_D arg_PSTH;
static bool trans_PSTH(DisasContext *ctx, arg_PSTH *a);
typedef arg_PLS_D arg_PSTD;
static bool trans_PSTD(DisasContext *ctx, arg_PSTD *a);
typedef arg_PLS_D arg_PADDI;
static bool trans_PADDI(DisasContext *ctx, arg_PADDI *a);
typedef arg_decode_insn641 arg_INVALID;
static bool trans_INVALID(DisasContext *ctx, arg_INVALID *a);
typedef arg_decode_insn641 arg_PNOP;
static bool trans_PNOP(DisasContext *ctx, arg_PNOP *a);

static void decode_insn64_extract_PLS_D(DisasContext *ctx, arg_PLS_D *a, uint64_t insn)
{
    a->r = extract64(insn, 52, 1);
    a->rt = extract64(insn, 21, 5);
    a->ra = extract64(insn, 16, 5);
    a->si = deposit64(extract64(insn, 0, 16), 16, 48, sextract64(insn, 32, 18));
}

static void decode_insn64_extract_PNOP(DisasContext *ctx, arg_decode_insn641 *a, uint64_t insn)
{
}

static bool decode_insn64(DisasContext *ctx, uint64_t insn)
{
    union {
        arg_PLS_D f_PLS_D;
        arg_decode_insn641 f_decode_insn641;
    } u;

    switch ((insn >> 55) & 0x1ff) {
    case 0x8:
        /* 000001000............................... ........ ........ ........ */
        decode_insn64_extract_PLS_D(ctx, &u.f_PLS_D, insn);
        switch ((insn >> 26) & 0x3f) {
        case 0x29:
            /* 000001000.......................101001.. ........ ........ ........ */
            /* ../target/ppc/insn64.decode:37 */
            if (trans_PLWA(ctx, &u.f_PLS_D)) return true;
            break;
        case 0x39:
            /* 000001000.......................111001.. ........ ........ ........ */
            /* ../target/ppc/insn64.decode:39 */
            if (trans_PLD(ctx, &u.f_PLS_D)) return true;
            break;
        case 0x3d:
            /* 000001000.......................111101.. ........ ........ ........ */
            /* ../target/ppc/insn64.decode:51 */
            if (trans_PSTD(ctx, &u.f_PLS_D)) return true;
            break;
        }
        break;
    case 0xc:
        /* 000001100............................... ........ ........ ........ */
        decode_insn64_extract_PLS_D(ctx, &u.f_PLS_D, insn);
        switch ((insn >> 26) & 0x3f) {
        case 0xe:
            /* 000001100.......................001110.. ........ ........ ........ */
            /* ../target/ppc/insn64.decode:56 */
            if (trans_PADDI(ctx, &u.f_PLS_D)) return true;
            break;
        case 0x20:
            /* 000001100.......................100000.. ........ ........ ........ */
            /* ../target/ppc/insn64.decode:35 */
            if (trans_PLWZ(ctx, &u.f_PLS_D)) return true;
            break;
        case 0x22:
            /* 000001100.......................100010.. ........ ........ ........ */
            /* ../target/ppc/insn64.decode:29 */
            if (trans_PLBZ(ctx, &u.f_PLS_D)) return true;
            break;
        case 0x24:
            /* 000001100.......................100100.. ........ ........ ........ */
            /* ../target/ppc/insn64.decode:44 */
            if (trans_PSTW(ctx, &u.f_PLS_D)) return true;
            break;
        case 0x26:
            /* 000001100.......................100110.. ........ ........ ........ */
            /* ../target/ppc/insn64.decode:46 */
            if (trans_PSTB(ctx, &u.f_PLS_D)) return true;
            break;
        case 0x28:
            /* 000001100.......................101000.. ........ ........ ........ */
            /* ../target/ppc/insn64.decode:31 */
            if (trans_PLHZ(ctx, &u.f_PLS_D)) return true;
            break;
        case 0x2a:
            /* 000001100.......................101010.. ........ ........ ........ */
            /* ../target/ppc/insn64.decode:33 */
            if (trans_PLHA(ctx, &u.f_PLS_D)) return true;
            break;
        case 0x2c:
            /* 000001100.......................101100.. ........ ........ ........ */
            /* ../target/ppc/insn64.decode:48 */
            if (trans_PSTH(ctx, &u.f_PLS_D)) return true;
            break;
        }
        break;
    case 0xe:
        /* 000001110............................... ........ ........ ........ */
        switch (insn & 0x0073ffff00000000ull) {
        case 0x0000000000000000:
            /* 000001110000..000000000000000000........ ........ ........ ........ */
            if ((insn & 0x0000000080000000u) == 0x0000000000000000) {
                /* 000001110000..0000000000000000000....... ........ ........ ........ */
                switch ((insn >> 26) & 0x1f) {
                case 0x0:
                    /* 000001110000..000000000000000000000000.. ........ ........ ........ */
                    switch ((insn >> 1) & 0x1ff) {
                    case 0x100:
                        /* 000001110000..000000000000000000000000.. ........ ......10 0000000. */
                        /* ../target/ppc/insn64.decode:117 */
                        decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                        if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                        break;
                    }
                    break;
                case 0x10:
                    /* 000001110000..000000000000000000010000.. ........ ........ ........ */
                    /* ../target/ppc/insn64.decode:68 */
                    decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                    if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                    break;
                case 0x11:
                    /* 000001110000..000000000000000000010001.. ........ ........ ........ */
                    switch ((insn >> 1) & 0x1) {
                    case 0x0:
                        /* 000001110000..000000000000000000010001.. ........ ........ ......0. */
                        switch (insn & 0x0000000000000001) {
                        case 0x0000000000000001:
                            /* 000001110000..000000000000000000010001.. ........ ........ ......01 */
                            /* ../target/ppc/insn64.decode:92 */
                            decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                            if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                            break;
                        }
                        break;
                    case 0x1:
                        /* 000001110000..000000000000000000010001.. ........ ........ ......1. */
                        /* ../target/ppc/insn64.decode:89 */
                        decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                        if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                        break;
                    }
                    break;
                case 0x12:
                    /* 000001110000..000000000000000000010010.. ........ ........ ........ */
                    /* ../target/ppc/insn64.decode:71 */
                    decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                    if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                    break;
                case 0x13:
                    /* 000001110000..000000000000000000010011.. ........ ........ ........ */
                    switch ((insn >> 1) & 0x3ff) {
                    case 0x10:
                        /* 000001110000..000000000000000000010011.. ........ .....000 0010000. */
                        /* ../target/ppc/insn64.decode:74 */
                        decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                        if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                        break;
                    case 0x12:
                        /* 000001110000..000000000000000000010011.. ........ .....000 0010010. */
                        /* ../target/ppc/insn64.decode:98 */
                        decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                        if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                        break;
                    case 0x52:
                        /* 000001110000..000000000000000000010011.. ........ .....000 1010010. */
                        /* ../target/ppc/insn64.decode:95 */
                        decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                        if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                        break;
                    case 0x92:
                        /* 000001110000..000000000000000000010011.. ........ .....001 0010010. */
                        /* ../target/ppc/insn64.decode:84 */
                        decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                        if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                        break;
                    case 0x112:
                        /* 000001110000..000000000000000000010011.. ........ .....010 0010010. */
                        /* ../target/ppc/insn64.decode:101 */
                        decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                        if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                        break;
                    case 0x132:
                        /* 000001110000..000000000000000000010011.. ........ .....010 0110010. */
                        /* ../target/ppc/insn64.decode:104 */
                        decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                        if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                        break;
                    case 0x172:
                        /* 000001110000..000000000000000000010011.. ........ .....010 1110010. */
                        /* ../target/ppc/insn64.decode:107 */
                        decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                        if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                        break;
                    case 0x210:
                        /* 000001110000..000000000000000000010011.. ........ .....100 0010000. */
                        /* ../target/ppc/insn64.decode:77 */
                        decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                        if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                        break;
                    case 0x230:
                        /* 000001110000..000000000000000000010011.. ........ .....100 0110000. */
                        /* ../target/ppc/insn64.decode:80 */
                        decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                        if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                        break;
                    }
                    break;
                case 0x1f:
                    /* 000001110000..000000000000000000011111.. ........ ........ ........ */
                    switch (insn & 0x00000000000107fe) {
                    case 0x0000000000000124:
                        /* 000001110000..000000000000000000011111.. .......0 .....001 0010010. */
                        /* ../target/ppc/insn64.decode:110 */
                        decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                        if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                        break;
                    case 0x0000000000000164:
                        /* 000001110000..000000000000000000011111.. .......0 .....001 0110010. */
                        /* ../target/ppc/insn64.decode:113 */
                        decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
                        if (trans_INVALID(ctx, &u.f_decode_insn641)) return true;
                        break;
                    }
                    break;
                }
            }
            /* ../target/ppc/insn64.decode:122 */
            decode_insn64_extract_PNOP(ctx, &u.f_decode_insn641, insn);
            if (trans_PNOP(ctx, &u.f_decode_insn641)) return true;
            break;
        }
        break;
    }
    return false;
}
