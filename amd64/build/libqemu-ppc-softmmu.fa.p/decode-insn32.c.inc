/* This file is autogenerated by scripts/decodetree.py.  */

typedef struct {
    int rt;
    int ra;
    int64_t si;
} arg_D;

typedef struct {
    int rt;
    int d;
} arg_DX;

typedef struct {
    int bf;
    bool l;
    int ra;
    int imm;
} arg_D_bf;

typedef struct {
    int vrt;
    int vra;
    int vrb;
} arg_VX;

typedef struct {
    int rt;
    int ra;
    int rb;
} arg_X;

typedef struct {
    int bf;
    bool l;
    int ra;
    int rb;
} arg_X_bfl;

typedef struct {
    int rt;
    int bi;
} arg_X_bi;

typedef arg_D arg_LBZ;
static bool trans_LBZ(DisasContext *ctx, arg_LBZ *a);
typedef arg_D arg_LBZU;
static bool trans_LBZU(DisasContext *ctx, arg_LBZU *a);
typedef arg_X arg_LBZX;
static bool trans_LBZX(DisasContext *ctx, arg_LBZX *a);
typedef arg_X arg_LBZUX;
static bool trans_LBZUX(DisasContext *ctx, arg_LBZUX *a);
typedef arg_D arg_LHZ;
static bool trans_LHZ(DisasContext *ctx, arg_LHZ *a);
typedef arg_D arg_LHZU;
static bool trans_LHZU(DisasContext *ctx, arg_LHZU *a);
typedef arg_X arg_LHZX;
static bool trans_LHZX(DisasContext *ctx, arg_LHZX *a);
typedef arg_X arg_LHZUX;
static bool trans_LHZUX(DisasContext *ctx, arg_LHZUX *a);
typedef arg_D arg_LHA;
static bool trans_LHA(DisasContext *ctx, arg_LHA *a);
typedef arg_D arg_LHAU;
static bool trans_LHAU(DisasContext *ctx, arg_LHAU *a);
typedef arg_X arg_LHAX;
static bool trans_LHAX(DisasContext *ctx, arg_LHAX *a);
typedef arg_X arg_LHAXU;
static bool trans_LHAXU(DisasContext *ctx, arg_LHAXU *a);
typedef arg_D arg_LWZ;
static bool trans_LWZ(DisasContext *ctx, arg_LWZ *a);
typedef arg_D arg_LWZU;
static bool trans_LWZU(DisasContext *ctx, arg_LWZU *a);
typedef arg_X arg_LWZX;
static bool trans_LWZX(DisasContext *ctx, arg_LWZX *a);
typedef arg_X arg_LWZUX;
static bool trans_LWZUX(DisasContext *ctx, arg_LWZUX *a);
typedef arg_D arg_LWA;
static bool trans_LWA(DisasContext *ctx, arg_LWA *a);
typedef arg_X arg_LWAX;
static bool trans_LWAX(DisasContext *ctx, arg_LWAX *a);
typedef arg_X arg_LWAUX;
static bool trans_LWAUX(DisasContext *ctx, arg_LWAUX *a);
typedef arg_D arg_LD;
static bool trans_LD(DisasContext *ctx, arg_LD *a);
typedef arg_D arg_LDU;
static bool trans_LDU(DisasContext *ctx, arg_LDU *a);
typedef arg_X arg_LDX;
static bool trans_LDX(DisasContext *ctx, arg_LDX *a);
typedef arg_X arg_LDUX;
static bool trans_LDUX(DisasContext *ctx, arg_LDUX *a);
typedef arg_D arg_STB;
static bool trans_STB(DisasContext *ctx, arg_STB *a);
typedef arg_D arg_STBU;
static bool trans_STBU(DisasContext *ctx, arg_STBU *a);
typedef arg_X arg_STBX;
static bool trans_STBX(DisasContext *ctx, arg_STBX *a);
typedef arg_X arg_STBUX;
static bool trans_STBUX(DisasContext *ctx, arg_STBUX *a);
typedef arg_D arg_STH;
static bool trans_STH(DisasContext *ctx, arg_STH *a);
typedef arg_D arg_STHU;
static bool trans_STHU(DisasContext *ctx, arg_STHU *a);
typedef arg_X arg_STHX;
static bool trans_STHX(DisasContext *ctx, arg_STHX *a);
typedef arg_X arg_STHUX;
static bool trans_STHUX(DisasContext *ctx, arg_STHUX *a);
typedef arg_D arg_STW;
static bool trans_STW(DisasContext *ctx, arg_STW *a);
typedef arg_D arg_STWU;
static bool trans_STWU(DisasContext *ctx, arg_STWU *a);
typedef arg_X arg_STWX;
static bool trans_STWX(DisasContext *ctx, arg_STWX *a);
typedef arg_X arg_STWUX;
static bool trans_STWUX(DisasContext *ctx, arg_STWUX *a);
typedef arg_D arg_STD;
static bool trans_STD(DisasContext *ctx, arg_STD *a);
typedef arg_D arg_STDU;
static bool trans_STDU(DisasContext *ctx, arg_STDU *a);
typedef arg_X arg_STDX;
static bool trans_STDX(DisasContext *ctx, arg_STDX *a);
typedef arg_X arg_STDUX;
static bool trans_STDUX(DisasContext *ctx, arg_STDUX *a);
typedef arg_X_bfl arg_CMP;
static bool trans_CMP(DisasContext *ctx, arg_CMP *a);
typedef arg_X_bfl arg_CMPL;
static bool trans_CMPL(DisasContext *ctx, arg_CMPL *a);
typedef arg_D_bf arg_CMPI;
static bool trans_CMPI(DisasContext *ctx, arg_CMPI *a);
typedef arg_D_bf arg_CMPLI;
static bool trans_CMPLI(DisasContext *ctx, arg_CMPLI *a);
typedef arg_D arg_ADDI;
static bool trans_ADDI(DisasContext *ctx, arg_ADDI *a);
typedef arg_D arg_ADDIS;
static bool trans_ADDIS(DisasContext *ctx, arg_ADDIS *a);
typedef arg_DX arg_ADDPCIS;
static bool trans_ADDPCIS(DisasContext *ctx, arg_ADDPCIS *a);
typedef arg_X arg_CFUGED;
static bool trans_CFUGED(DisasContext *ctx, arg_CFUGED *a);
typedef arg_X_bi arg_SETBC;
static bool trans_SETBC(DisasContext *ctx, arg_SETBC *a);
typedef arg_X_bi arg_SETBCR;
static bool trans_SETBCR(DisasContext *ctx, arg_SETBCR *a);
typedef arg_X_bi arg_SETNBC;
static bool trans_SETNBC(DisasContext *ctx, arg_SETNBC *a);
typedef arg_X_bi arg_SETNBCR;
static bool trans_SETNBCR(DisasContext *ctx, arg_SETNBCR *a);
typedef arg_VX arg_VCFUGED;
static bool trans_VCFUGED(DisasContext *ctx, arg_VCFUGED *a);

static void decode_insn32_extract_D(DisasContext *ctx, arg_D *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->ra = extract32(insn, 16, 5);
    a->si = sextract32(insn, 0, 16);
}

static void decode_insn32_extract_DS(DisasContext *ctx, arg_D *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->ra = extract32(insn, 16, 5);
    a->si = times_4(ctx, sextract32(insn, 2, 14));
}

static void decode_insn32_extract_DX(DisasContext *ctx, arg_DX *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->d = deposit32(deposit32(extract32(insn, 0, 1), 1, 31, extract32(insn, 16, 5)), 6, 26, sextract32(insn, 6, 10));
}

static void decode_insn32_extract_D_bfs(DisasContext *ctx, arg_D_bf *a, uint32_t insn)
{
    a->bf = extract32(insn, 23, 3);
    a->l = extract32(insn, 21, 1);
    a->ra = extract32(insn, 16, 5);
    a->imm = sextract32(insn, 0, 16);
}

static void decode_insn32_extract_D_bfu(DisasContext *ctx, arg_D_bf *a, uint32_t insn)
{
    a->bf = extract32(insn, 23, 3);
    a->l = extract32(insn, 21, 1);
    a->ra = extract32(insn, 16, 5);
    a->imm = extract32(insn, 0, 16);
}

static void decode_insn32_extract_VX(DisasContext *ctx, arg_VX *a, uint32_t insn)
{
    a->vrt = extract32(insn, 21, 5);
    a->vra = extract32(insn, 16, 5);
    a->vrb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_X(DisasContext *ctx, arg_X *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->ra = extract32(insn, 16, 5);
    a->rb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_X_bfl(DisasContext *ctx, arg_X_bfl *a, uint32_t insn)
{
    a->bf = extract32(insn, 23, 3);
    a->l = extract32(insn, 21, 1);
    a->ra = extract32(insn, 16, 5);
    a->rb = extract32(insn, 11, 5);
}

static void decode_insn32_extract_X_bi(DisasContext *ctx, arg_X_bi *a, uint32_t insn)
{
    a->rt = extract32(insn, 21, 5);
    a->bi = extract32(insn, 16, 5);
}

static bool decode_insn32(DisasContext *ctx, uint32_t insn)
{
    union {
        arg_D f_D;
        arg_DX f_DX;
        arg_D_bf f_D_bf;
        arg_VX f_VX;
        arg_X f_X;
        arg_X_bfl f_X_bfl;
        arg_X_bi f_X_bi;
    } u;

    switch ((insn >> 26) & 0x3f) {
    case 0x4:
        /* 000100.. ........ ........ ........ */
        decode_insn32_extract_VX(ctx, &u.f_VX, insn);
        switch (insn & 0x000007ff) {
        case 0x0000054d:
            /* 000100.. ........ .....101 01001101 */
            /* ../target/ppc/insn32.decode:126 */
            if (trans_VCFUGED(ctx, &u.f_VX)) return true;
            break;
        }
        break;
    case 0xa:
        /* 001010.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:104 */
        decode_insn32_extract_D_bfu(ctx, &u.f_D_bf, insn);
        if (trans_CMPLI(ctx, &u.f_D_bf)) return true;
        break;
    case 0xb:
        /* 001011.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:103 */
        decode_insn32_extract_D_bfs(ctx, &u.f_D_bf, insn);
        if (trans_CMPI(ctx, &u.f_D_bf)) return true;
        break;
    case 0xe:
        /* 001110.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:108 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_ADDI(ctx, &u.f_D)) return true;
        break;
    case 0xf:
        /* 001111.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:109 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_ADDIS(ctx, &u.f_D)) return true;
        break;
    case 0x13:
        /* 010011.. ........ ........ ........ */
        decode_insn32_extract_DX(ctx, &u.f_DX, insn);
        switch ((insn >> 1) & 0x1f) {
        case 0x2:
            /* 010011.. ........ ........ ..00010. */
            /* ../target/ppc/insn32.decode:111 */
            if (trans_ADDPCIS(ctx, &u.f_DX)) return true;
            break;
        }
        break;
    case 0x1f:
        /* 011111.. ........ ........ ........ */
        switch ((insn >> 1) & 0x3ff) {
        case 0x0:
            /* 011111.. ........ .....000 0000000. */
            /* ../target/ppc/insn32.decode:101 */
            decode_insn32_extract_X_bfl(ctx, &u.f_X_bfl, insn);
            if (trans_CMP(ctx, &u.f_X_bfl)) return true;
            break;
        case 0x15:
            /* 011111.. ........ .....000 0010101. */
            /* ../target/ppc/insn32.decode:74 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_LDX(ctx, &u.f_X)) return true;
            break;
        case 0x17:
            /* 011111.. ........ .....000 0010111. */
            /* ../target/ppc/insn32.decode:65 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_LWZX(ctx, &u.f_X)) return true;
            break;
        case 0x20:
            /* 011111.. ........ .....000 0100000. */
            /* ../target/ppc/insn32.decode:102 */
            decode_insn32_extract_X_bfl(ctx, &u.f_X_bfl, insn);
            if (trans_CMPL(ctx, &u.f_X_bfl)) return true;
            break;
        case 0x35:
            /* 011111.. ........ .....000 0110101. */
            /* ../target/ppc/insn32.decode:75 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_LDUX(ctx, &u.f_X)) return true;
            break;
        case 0x37:
            /* 011111.. ........ .....000 0110111. */
            /* ../target/ppc/insn32.decode:66 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_LWZUX(ctx, &u.f_X)) return true;
            break;
        case 0x57:
            /* 011111.. ........ .....000 1010111. */
            /* ../target/ppc/insn32.decode:50 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_LBZX(ctx, &u.f_X)) return true;
            break;
        case 0x77:
            /* 011111.. ........ .....000 1110111. */
            /* ../target/ppc/insn32.decode:51 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_LBZUX(ctx, &u.f_X)) return true;
            break;
        case 0x95:
            /* 011111.. ........ .....001 0010101. */
            /* ../target/ppc/insn32.decode:96 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_STDX(ctx, &u.f_X)) return true;
            break;
        case 0x97:
            /* 011111.. ........ .....001 0010111. */
            /* ../target/ppc/insn32.decode:91 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_STWX(ctx, &u.f_X)) return true;
            break;
        case 0xb5:
            /* 011111.. ........ .....001 0110101. */
            /* ../target/ppc/insn32.decode:97 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_STDUX(ctx, &u.f_X)) return true;
            break;
        case 0xb7:
            /* 011111.. ........ .....001 0110111. */
            /* ../target/ppc/insn32.decode:92 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_STWUX(ctx, &u.f_X)) return true;
            break;
        case 0xd7:
            /* 011111.. ........ .....001 1010111. */
            /* ../target/ppc/insn32.decode:81 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_STBX(ctx, &u.f_X)) return true;
            break;
        case 0xdc:
            /* 011111.. ........ .....001 1011100. */
            /* ../target/ppc/insn32.decode:115 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_CFUGED(ctx, &u.f_X)) return true;
            break;
        case 0xf7:
            /* 011111.. ........ .....001 1110111. */
            /* ../target/ppc/insn32.decode:82 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_STBUX(ctx, &u.f_X)) return true;
            break;
        case 0x117:
            /* 011111.. ........ .....010 0010111. */
            /* ../target/ppc/insn32.decode:55 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_LHZX(ctx, &u.f_X)) return true;
            break;
        case 0x137:
            /* 011111.. ........ .....010 0110111. */
            /* ../target/ppc/insn32.decode:56 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_LHZUX(ctx, &u.f_X)) return true;
            break;
        case 0x155:
            /* 011111.. ........ .....010 1010101. */
            /* ../target/ppc/insn32.decode:69 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_LWAX(ctx, &u.f_X)) return true;
            break;
        case 0x157:
            /* 011111.. ........ .....010 1010111. */
            /* ../target/ppc/insn32.decode:60 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_LHAX(ctx, &u.f_X)) return true;
            break;
        case 0x175:
            /* 011111.. ........ .....010 1110101. */
            /* ../target/ppc/insn32.decode:70 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_LWAUX(ctx, &u.f_X)) return true;
            break;
        case 0x177:
            /* 011111.. ........ .....010 1110111. */
            /* ../target/ppc/insn32.decode:61 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_LHAXU(ctx, &u.f_X)) return true;
            break;
        case 0x180:
            /* 011111.. ........ .....011 0000000. */
            /* ../target/ppc/insn32.decode:119 */
            decode_insn32_extract_X_bi(ctx, &u.f_X_bi, insn);
            if (trans_SETBC(ctx, &u.f_X_bi)) return true;
            break;
        case 0x197:
            /* 011111.. ........ .....011 0010111. */
            /* ../target/ppc/insn32.decode:86 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_STHX(ctx, &u.f_X)) return true;
            break;
        case 0x1a0:
            /* 011111.. ........ .....011 0100000. */
            /* ../target/ppc/insn32.decode:120 */
            decode_insn32_extract_X_bi(ctx, &u.f_X_bi, insn);
            if (trans_SETBCR(ctx, &u.f_X_bi)) return true;
            break;
        case 0x1b7:
            /* 011111.. ........ .....011 0110111. */
            /* ../target/ppc/insn32.decode:87 */
            decode_insn32_extract_X(ctx, &u.f_X, insn);
            if (trans_STHUX(ctx, &u.f_X)) return true;
            break;
        case 0x1c0:
            /* 011111.. ........ .....011 1000000. */
            /* ../target/ppc/insn32.decode:121 */
            decode_insn32_extract_X_bi(ctx, &u.f_X_bi, insn);
            if (trans_SETNBC(ctx, &u.f_X_bi)) return true;
            break;
        case 0x1e0:
            /* 011111.. ........ .....011 1100000. */
            /* ../target/ppc/insn32.decode:122 */
            decode_insn32_extract_X_bi(ctx, &u.f_X_bi, insn);
            if (trans_SETNBCR(ctx, &u.f_X_bi)) return true;
            break;
        }
        break;
    case 0x20:
        /* 100000.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:63 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LWZ(ctx, &u.f_D)) return true;
        break;
    case 0x21:
        /* 100001.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:64 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LWZU(ctx, &u.f_D)) return true;
        break;
    case 0x22:
        /* 100010.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:48 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LBZ(ctx, &u.f_D)) return true;
        break;
    case 0x23:
        /* 100011.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:49 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LBZU(ctx, &u.f_D)) return true;
        break;
    case 0x24:
        /* 100100.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:89 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STW(ctx, &u.f_D)) return true;
        break;
    case 0x25:
        /* 100101.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:90 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STWU(ctx, &u.f_D)) return true;
        break;
    case 0x26:
        /* 100110.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:79 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STB(ctx, &u.f_D)) return true;
        break;
    case 0x27:
        /* 100111.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:80 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STBU(ctx, &u.f_D)) return true;
        break;
    case 0x28:
        /* 101000.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:53 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LHZ(ctx, &u.f_D)) return true;
        break;
    case 0x29:
        /* 101001.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:54 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LHZU(ctx, &u.f_D)) return true;
        break;
    case 0x2a:
        /* 101010.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:58 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LHA(ctx, &u.f_D)) return true;
        break;
    case 0x2b:
        /* 101011.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:59 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_LHAU(ctx, &u.f_D)) return true;
        break;
    case 0x2c:
        /* 101100.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:84 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STH(ctx, &u.f_D)) return true;
        break;
    case 0x2d:
        /* 101101.. ........ ........ ........ */
        /* ../target/ppc/insn32.decode:85 */
        decode_insn32_extract_D(ctx, &u.f_D, insn);
        if (trans_STHU(ctx, &u.f_D)) return true;
        break;
    case 0x3a:
        /* 111010.. ........ ........ ........ */
        decode_insn32_extract_DS(ctx, &u.f_D, insn);
        switch (insn & 0x00000003) {
        case 0x00000000:
            /* 111010.. ........ ........ ......00 */
            /* ../target/ppc/insn32.decode:72 */
            if (trans_LD(ctx, &u.f_D)) return true;
            break;
        case 0x00000001:
            /* 111010.. ........ ........ ......01 */
            /* ../target/ppc/insn32.decode:73 */
            if (trans_LDU(ctx, &u.f_D)) return true;
            break;
        case 0x00000002:
            /* 111010.. ........ ........ ......10 */
            /* ../target/ppc/insn32.decode:68 */
            if (trans_LWA(ctx, &u.f_D)) return true;
            break;
        }
        break;
    case 0x3e:
        /* 111110.. ........ ........ ........ */
        decode_insn32_extract_DS(ctx, &u.f_D, insn);
        switch (insn & 0x00000003) {
        case 0x00000000:
            /* 111110.. ........ ........ ......00 */
            /* ../target/ppc/insn32.decode:94 */
            if (trans_STD(ctx, &u.f_D)) return true;
            break;
        case 0x00000001:
            /* 111110.. ........ ........ ......01 */
            /* ../target/ppc/insn32.decode:95 */
            if (trans_STDU(ctx, &u.f_D)) return true;
            break;
        }
        break;
    }
    return false;
}
